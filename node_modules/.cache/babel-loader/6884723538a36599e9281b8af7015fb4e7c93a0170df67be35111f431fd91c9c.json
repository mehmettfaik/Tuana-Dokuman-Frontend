{"ast":null,"code":"// services/pdfService.js\nclass PDFService {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_API_URL || 'https://tuana-dokuman-backend.onrender.com';\n  }\n\n  // Backend bağlantısını test et\n  async testConnection() {\n    try {\n      const response = await fetch(`${this.baseURL}/api/health`, {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.ok;\n    } catch (error) {\n      console.warn('Backend servisi erişilebilir değil:', error);\n      return false;\n    }\n  }\n\n  // 1. PDF üretimini başlat\n  async startPDFGeneration(docType, formData, language = 'en') {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/start`, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          docType,\n          formData,\n          language\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      return result.jobId;\n    } catch (error) {\n      console.error('Error starting PDF generation:', error);\n      throw error;\n    }\n  }\n\n  // 2. PDF durumunu kontrol et\n  async checkPDFStatus(jobId) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/status/${jobId}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking PDF status:', error);\n      throw error;\n    }\n  }\n\n  // 3. PDF'i indir\n  async downloadPDF(jobId, fileName = 'document.pdf') {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/download/${jobId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const blob = await response.blob();\n\n      // Blob'un boyutunu kontrol et\n      if (blob.size === 0) {\n        throw new Error('Received empty PDF file from server');\n      }\n\n      // Dosyayı indir\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = fileName;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      return true;\n    } catch (error) {\n      console.error('Error downloading PDF:', error);\n      throw error;\n    }\n  }\n\n  // Polling ile durum kontrolü (otomatik kontrol)\n  async waitForPDFCompletion(jobId, onProgress = null, timeout = 60000) {\n    const startTime = Date.now();\n    const pollInterval = 1000; // 1 saniye\n\n    return new Promise((resolve, reject) => {\n      const poll = async () => {\n        try {\n          if (Date.now() - startTime > timeout) {\n            reject(new Error('PDF generation timeout'));\n            return;\n          }\n          const status = await this.checkPDFStatus(jobId);\n\n          // Progress callback'i varsa çağır\n          if (onProgress) {\n            onProgress(status);\n          }\n          if (status.status === 'completed') {\n            resolve(status);\n          } else if (status.status === 'failed') {\n            reject(new Error(status.error || 'PDF generation failed'));\n          } else {\n            // Hala pending/processing, tekrar kontrol et\n            setTimeout(poll, pollInterval);\n          }\n        } catch (error) {\n          reject(error);\n        }\n      };\n      poll();\n    });\n  }\n\n  // Form type'a göre dosya adı oluştur\n  generateFileName(docType, formData) {\n    const timestamp = Date.now();\n    switch (docType) {\n      case 'proforma-invoice':\n        const proformaNumber = formData['PROFORMA INVOICE NUMBER'] || 'Proforma';\n        const proformaCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safeProformaName = `${proformaNumber}_${proformaCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeProformaName}_Proforma-Invoice.pdf`;\n      case 'invoice':\n        const invoiceNumber = formData['INVOICE NUMBER'] || 'Invoice';\n        const invoiceCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safeInvoiceName = `${invoiceNumber}_${invoiceCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeInvoiceName}_Invoice.pdf`;\n      case 'packing-list':\n        const packingInvoiceNumber = formData['INVOICE NUMBER'] || 'No-Invoice-Number';\n        const packingCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safePackingName = `${packingInvoiceNumber}_${packingCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safePackingName}_Packing-List.pdf`;\n      case 'credit-note':\n        const creditNumber = formData['CREDIT NOTE NUMBER'] || 'Credit-Note';\n        const safeCreditNumber = creditNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeCreditNumber}_Credit-Note.pdf`;\n      case 'debit-note':\n        const debitNumber = formData['DEBIT NOTE NUMBER'] || 'Debit-Note';\n        const safeDebitNumber = debitNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeDebitNumber}_Debit-Note.pdf`;\n      case 'order-confirmation':\n        const orderConfirmationNumber = formData['ORDER CONFIRMATION NUMBER'] || 'Order-Confirmation';\n        const safeOrderConfirmationNumber = orderConfirmationNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeOrderConfirmationNumber}_Order-Confirmation.pdf`;\n      case 'siparis':\n        const orderNumber = formData['ORDER NUMBER'] || 'No-Order-Number';\n        const safeOrderNumber = orderNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeOrderNumber}_Siparis-Formu.pdf`;\n      case 'price-offer':\n        const priceOfferNumber = formData['PRICE OFFER NUMBER'] || 'No-Price-Offer-Number';\n        const safePriceOfferNumber = priceOfferNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safePriceOfferNumber}_Price-Offer.pdf`;\n      case 'fabric-technical':\n        const articleCode = formData['ARTICLE CODE'] || 'Technical';\n        const safeArticleCode = articleCode.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeArticleCode}_Technical-Specification.pdf`;\n      default:\n        return `${docType}_${timestamp}.pdf`;\n    }\n  }\n\n  // Ana PDF üretim fonksiyonu - Fallback desteği ile\n  async generatePDFWithFallback(formData, docType, language = 'en') {\n    try {\n      // Önce yeni API'yi dene\n      const isConnected = await this.testConnection();\n      if (isConnected) {\n        console.log('Using new 3-stage PDF API');\n        const jobId = await this.startPDFGeneration(docType, formData, language);\n        await this.waitForPDFCompletion(jobId);\n        const fileName = this.generateFileName(docType, formData);\n        return await this.downloadPDF(jobId, fileName);\n      } else {\n        console.log('New API not available, trying legacy API');\n        return await this.generatePDFLegacy(formData, docType, language);\n      }\n    } catch (error) {\n      console.error('Primary PDF generation failed, trying legacy API:', error);\n      try {\n        return await this.generatePDFLegacy(formData, docType, language);\n      } catch (legacyError) {\n        console.error('Legacy API also failed, using demo PDF generation:', legacyError);\n        try {\n          return await this.generatePDFDemo(formData, docType, language);\n        } catch (demoError) {\n          console.error('All PDF generation methods failed:', demoError);\n          throw new Error(`PDF oluşturulamadı. Tüm sistemler devre dışı. (Error: ${error.message})`);\n        }\n      }\n    }\n  }\n}\nconst pdfService = new PDFService();\nexport default pdfService;","map":{"version":3,"names":["PDFService","constructor","baseURL","process","env","REACT_APP_API_URL","testConnection","response","fetch","method","mode","headers","ok","error","console","warn","startPDFGeneration","docType","formData","language","body","JSON","stringify","errorData","json","catch","Error","message","status","result","jobId","checkPDFStatus","downloadPDF","fileName","blob","size","url","window","URL","createObjectURL","a","document","createElement","style","display","href","download","appendChild","click","revokeObjectURL","removeChild","waitForPDFCompletion","onProgress","timeout","startTime","Date","now","pollInterval","Promise","resolve","reject","poll","setTimeout","generateFileName","timestamp","proformaNumber","proformaCompany","safeProformaName","replace","invoiceNumber","invoiceCompany","safeInvoiceName","packingInvoiceNumber","packingCompany","safePackingName","creditNumber","safeCreditNumber","debitNumber","safeDebitNumber","orderConfirmationNumber","safeOrderConfirmationNumber","orderNumber","safeOrderNumber","priceOfferNumber","safePriceOfferNumber","articleCode","safeArticleCode","generatePDFWithFallback","isConnected","log","generatePDFLegacy","legacyError","generatePDFDemo","demoError","pdfService"],"sources":["/Users/mehmettfaik/Documents/GitHub/Tuana-Dokuman-Frontend/src/services/pdfService.js"],"sourcesContent":["// services/pdfService.js\nclass PDFService {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_API_URL || 'https://tuana-dokuman-backend.onrender.com';\n  }\n\n  // Backend bağlantısını test et\n  async testConnection() {\n    try {\n      const response = await fetch(`${this.baseURL}/api/health`, {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      return response.ok;\n    } catch (error) {\n      console.warn('Backend servisi erişilebilir değil:', error);\n      return false;\n    }\n  }\n\n  // 1. PDF üretimini başlat\n  async startPDFGeneration(docType, formData, language = 'en') {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/start`, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          docType,\n          formData,\n          language\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      return result.jobId;\n    } catch (error) {\n      console.error('Error starting PDF generation:', error);\n      throw error;\n    }\n  }\n\n  // 2. PDF durumunu kontrol et\n  async checkPDFStatus(jobId) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/status/${jobId}`);\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking PDF status:', error);\n      throw error;\n    }\n  }\n\n  // 3. PDF'i indir\n  async downloadPDF(jobId, fileName = 'document.pdf') {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/download/${jobId}`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const blob = await response.blob();\n      \n      // Blob'un boyutunu kontrol et\n      if (blob.size === 0) {\n        throw new Error('Received empty PDF file from server');\n      }\n      \n      // Dosyayı indir\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = fileName;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      return true;\n    } catch (error) {\n      console.error('Error downloading PDF:', error);\n      throw error;\n    }\n  }\n\n  // Polling ile durum kontrolü (otomatik kontrol)\n  async waitForPDFCompletion(jobId, onProgress = null, timeout = 60000) {\n    const startTime = Date.now();\n    const pollInterval = 1000; // 1 saniye\n\n    return new Promise((resolve, reject) => {\n      const poll = async () => {\n        try {\n          if (Date.now() - startTime > timeout) {\n            reject(new Error('PDF generation timeout'));\n            return;\n          }\n\n          const status = await this.checkPDFStatus(jobId);\n          \n          // Progress callback'i varsa çağır\n          if (onProgress) {\n            onProgress(status);\n          }\n\n          if (status.status === 'completed') {\n            resolve(status);\n          } else if (status.status === 'failed') {\n            reject(new Error(status.error || 'PDF generation failed'));\n          } else {\n            // Hala pending/processing, tekrar kontrol et\n            setTimeout(poll, pollInterval);\n          }\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      poll();\n    });\n  }\n\n  // Form type'a göre dosya adı oluştur\n  generateFileName(docType, formData) {\n    const timestamp = Date.now();\n    \n    switch (docType) {\n      case 'proforma-invoice':\n        const proformaNumber = formData['PROFORMA INVOICE NUMBER'] || 'Proforma';\n        const proformaCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safeProformaName = `${proformaNumber}_${proformaCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeProformaName}_Proforma-Invoice.pdf`;\n        \n      case 'invoice':\n        const invoiceNumber = formData['INVOICE NUMBER'] || 'Invoice';\n        const invoiceCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safeInvoiceName = `${invoiceNumber}_${invoiceCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeInvoiceName}_Invoice.pdf`;\n        \n      case 'packing-list':\n        const packingInvoiceNumber = formData['INVOICE NUMBER'] || 'No-Invoice-Number';\n        const packingCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safePackingName = `${packingInvoiceNumber}_${packingCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safePackingName}_Packing-List.pdf`;\n        \n      case 'credit-note':\n        const creditNumber = formData['CREDIT NOTE NUMBER'] || 'Credit-Note';\n        const safeCreditNumber = creditNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeCreditNumber}_Credit-Note.pdf`;\n        \n      case 'debit-note':\n        const debitNumber = formData['DEBIT NOTE NUMBER'] || 'Debit-Note';\n        const safeDebitNumber = debitNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeDebitNumber}_Debit-Note.pdf`;\n        \n      case 'order-confirmation':\n        const orderConfirmationNumber = formData['ORDER CONFIRMATION NUMBER'] || 'Order-Confirmation';\n        const safeOrderConfirmationNumber = orderConfirmationNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeOrderConfirmationNumber}_Order-Confirmation.pdf`;\n        \n      case 'siparis':\n        const orderNumber = formData['ORDER NUMBER'] || 'No-Order-Number';\n        const safeOrderNumber = orderNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeOrderNumber}_Siparis-Formu.pdf`;\n        \n      case 'price-offer':\n        const priceOfferNumber = formData['PRICE OFFER NUMBER'] || 'No-Price-Offer-Number';\n        const safePriceOfferNumber = priceOfferNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safePriceOfferNumber}_Price-Offer.pdf`;\n        \n      case 'fabric-technical':\n        const articleCode = formData['ARTICLE CODE'] || 'Technical';\n        const safeArticleCode = articleCode.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeArticleCode}_Technical-Specification.pdf`;\n        \n      default:\n        return `${docType}_${timestamp}.pdf`;\n    }\n  }\n\n  // Ana PDF üretim fonksiyonu - Fallback desteği ile\n  async generatePDFWithFallback(formData, docType, language = 'en') {\n    try {\n      // Önce yeni API'yi dene\n      const isConnected = await this.testConnection();\n      \n      if (isConnected) {\n        console.log('Using new 3-stage PDF API');\n        const jobId = await this.startPDFGeneration(docType, formData, language);\n        await this.waitForPDFCompletion(jobId);\n        const fileName = this.generateFileName(docType, formData);\n        return await this.downloadPDF(jobId, fileName);\n      } else {\n        console.log('New API not available, trying legacy API');\n        return await this.generatePDFLegacy(formData, docType, language);\n      }\n    } catch (error) {\n      console.error('Primary PDF generation failed, trying legacy API:', error);\n      try {\n        return await this.generatePDFLegacy(formData, docType, language);\n      } catch (legacyError) {\n        console.error('Legacy API also failed, using demo PDF generation:', legacyError);\n        try {\n          return await this.generatePDFDemo(formData, docType, language);\n        } catch (demoError) {\n          console.error('All PDF generation methods failed:', demoError);\n          throw new Error(`PDF oluşturulamadı. Tüm sistemler devre dışı. (Error: ${error.message})`);\n        }\n      }\n    }\n  }\n}\n\nconst pdfService = new PDFService();\nexport default pdfService;\n"],"mappings":"AAAA;AACA,MAAMA,UAAU,CAAC;EACfC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,4CAA4C;EAC9F;;EAEA;EACA,MAAMC,cAAcA,CAAA,EAAG;IACrB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACN,OAAO,aAAa,EAAE;QACzDO,MAAM,EAAE,KAAK;QACbC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,OAAOJ,QAAQ,CAACK,EAAE;IACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,qCAAqC,EAAEF,KAAK,CAAC;MAC1D,OAAO,KAAK;IACd;EACF;;EAEA;EACA,MAAMG,kBAAkBA,CAACC,OAAO,EAAEC,QAAQ,EAAEC,QAAQ,GAAG,IAAI,EAAE;IAC3D,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACN,OAAO,gBAAgB,EAAE;QAC5DO,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDS,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBL,OAAO;UACPC,QAAQ;UACRC;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACZ,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAMW,SAAS,GAAG,MAAMhB,QAAQ,CAACiB,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,IAAIC,KAAK,CAACH,SAAS,CAACI,OAAO,IAAI,uBAAuBpB,QAAQ,CAACqB,MAAM,EAAE,CAAC;MAChF;MAEA,MAAMC,MAAM,GAAG,MAAMtB,QAAQ,CAACiB,IAAI,CAAC,CAAC;MACpC,OAAOK,MAAM,CAACC,KAAK;IACrB,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMkB,cAAcA,CAACD,KAAK,EAAE;IAC1B,IAAI;MACF,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACN,OAAO,mBAAmB4B,KAAK,EAAE,CAAC;MAEvE,IAAI,CAACvB,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAMW,SAAS,GAAG,MAAMhB,QAAQ,CAACiB,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIE,KAAK,CAACH,SAAS,CAACI,OAAO,IAAI,uBAAuBpB,QAAQ,CAACqB,MAAM,EAAE,CAAC;MAChF;MAEA,OAAO,MAAMrB,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMmB,WAAWA,CAACF,KAAK,EAAEG,QAAQ,GAAG,cAAc,EAAE;IAClD,IAAI;MACF,MAAM1B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACN,OAAO,qBAAqB4B,KAAK,EAAE,CAAC;MAEzE,IAAI,CAACvB,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAIc,KAAK,CAAC,uBAAuBnB,QAAQ,CAACqB,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMM,IAAI,GAAG,MAAM3B,QAAQ,CAAC2B,IAAI,CAAC,CAAC;;MAElC;MACA,IAAIA,IAAI,CAACC,IAAI,KAAK,CAAC,EAAE;QACnB,MAAM,IAAIT,KAAK,CAAC,qCAAqC,CAAC;MACxD;;MAEA;MACA,MAAMU,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;MAC5C,MAAMM,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACrCF,CAAC,CAACG,KAAK,CAACC,OAAO,GAAG,MAAM;MACxBJ,CAAC,CAACK,IAAI,GAAGT,GAAG;MACZI,CAAC,CAACM,QAAQ,GAAGb,QAAQ;MACrBQ,QAAQ,CAACrB,IAAI,CAAC2B,WAAW,CAACP,CAAC,CAAC;MAC5BA,CAAC,CAACQ,KAAK,CAAC,CAAC;MACTX,MAAM,CAACC,GAAG,CAACW,eAAe,CAACb,GAAG,CAAC;MAC/BK,QAAQ,CAACrB,IAAI,CAAC8B,WAAW,CAACV,CAAC,CAAC;MAE5B,OAAO,IAAI;IACb,CAAC,CAAC,OAAO3B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMsC,oBAAoBA,CAACrB,KAAK,EAAEsB,UAAU,GAAG,IAAI,EAAEC,OAAO,GAAG,KAAK,EAAE;IACpE,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAC5B,MAAMC,YAAY,GAAG,IAAI,CAAC,CAAC;;IAE3B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,IAAI,GAAG,MAAAA,CAAA,KAAY;QACvB,IAAI;UACF,IAAIN,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS,GAAGD,OAAO,EAAE;YACpCO,MAAM,CAAC,IAAIlC,KAAK,CAAC,wBAAwB,CAAC,CAAC;YAC3C;UACF;UAEA,MAAME,MAAM,GAAG,MAAM,IAAI,CAACG,cAAc,CAACD,KAAK,CAAC;;UAE/C;UACA,IAAIsB,UAAU,EAAE;YACdA,UAAU,CAACxB,MAAM,CAAC;UACpB;UAEA,IAAIA,MAAM,CAACA,MAAM,KAAK,WAAW,EAAE;YACjC+B,OAAO,CAAC/B,MAAM,CAAC;UACjB,CAAC,MAAM,IAAIA,MAAM,CAACA,MAAM,KAAK,QAAQ,EAAE;YACrCgC,MAAM,CAAC,IAAIlC,KAAK,CAACE,MAAM,CAACf,KAAK,IAAI,uBAAuB,CAAC,CAAC;UAC5D,CAAC,MAAM;YACL;YACAiD,UAAU,CAACD,IAAI,EAAEJ,YAAY,CAAC;UAChC;QACF,CAAC,CAAC,OAAO5C,KAAK,EAAE;UACd+C,MAAM,CAAC/C,KAAK,CAAC;QACf;MACF,CAAC;MAEDgD,IAAI,CAAC,CAAC;IACR,CAAC,CAAC;EACJ;;EAEA;EACAE,gBAAgBA,CAAC9C,OAAO,EAAEC,QAAQ,EAAE;IAClC,MAAM8C,SAAS,GAAGT,IAAI,CAACC,GAAG,CAAC,CAAC;IAE5B,QAAQvC,OAAO;MACb,KAAK,kBAAkB;QACrB,MAAMgD,cAAc,GAAG/C,QAAQ,CAAC,yBAAyB,CAAC,IAAI,UAAU;QACxE,MAAMgD,eAAe,GAAGhD,QAAQ,CAAC,sBAAsB,CAAC,IAAI,SAAS;QACrE,MAAMiD,gBAAgB,GAAG,GAAGF,cAAc,IAAIC,eAAe,EAAE,CAACE,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QACrH,OAAO,GAAGD,gBAAgB,uBAAuB;MAEnD,KAAK,SAAS;QACZ,MAAME,aAAa,GAAGnD,QAAQ,CAAC,gBAAgB,CAAC,IAAI,SAAS;QAC7D,MAAMoD,cAAc,GAAGpD,QAAQ,CAAC,sBAAsB,CAAC,IAAI,SAAS;QACpE,MAAMqD,eAAe,GAAG,GAAGF,aAAa,IAAIC,cAAc,EAAE,CAACF,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QAClH,OAAO,GAAGG,eAAe,cAAc;MAEzC,KAAK,cAAc;QACjB,MAAMC,oBAAoB,GAAGtD,QAAQ,CAAC,gBAAgB,CAAC,IAAI,mBAAmB;QAC9E,MAAMuD,cAAc,GAAGvD,QAAQ,CAAC,sBAAsB,CAAC,IAAI,SAAS;QACpE,MAAMwD,eAAe,GAAG,GAAGF,oBAAoB,IAAIC,cAAc,EAAE,CAACL,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QACzH,OAAO,GAAGM,eAAe,mBAAmB;MAE9C,KAAK,aAAa;QAChB,MAAMC,YAAY,GAAGzD,QAAQ,CAAC,oBAAoB,CAAC,IAAI,aAAa;QACpE,MAAM0D,gBAAgB,GAAGD,YAAY,CAACP,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QAC3F,OAAO,GAAGQ,gBAAgB,kBAAkB;MAE9C,KAAK,YAAY;QACf,MAAMC,WAAW,GAAG3D,QAAQ,CAAC,mBAAmB,CAAC,IAAI,YAAY;QACjE,MAAM4D,eAAe,GAAGD,WAAW,CAACT,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QACzF,OAAO,GAAGU,eAAe,iBAAiB;MAE5C,KAAK,oBAAoB;QACvB,MAAMC,uBAAuB,GAAG7D,QAAQ,CAAC,2BAA2B,CAAC,IAAI,oBAAoB;QAC7F,MAAM8D,2BAA2B,GAAGD,uBAAuB,CAACX,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QACjH,OAAO,GAAGY,2BAA2B,yBAAyB;MAEhE,KAAK,SAAS;QACZ,MAAMC,WAAW,GAAG/D,QAAQ,CAAC,cAAc,CAAC,IAAI,iBAAiB;QACjE,MAAMgE,eAAe,GAAGD,WAAW,CAACb,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QACzF,OAAO,GAAGc,eAAe,oBAAoB;MAE/C,KAAK,aAAa;QAChB,MAAMC,gBAAgB,GAAGjE,QAAQ,CAAC,oBAAoB,CAAC,IAAI,uBAAuB;QAClF,MAAMkE,oBAAoB,GAAGD,gBAAgB,CAACf,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QACnG,OAAO,GAAGgB,oBAAoB,kBAAkB;MAElD,KAAK,kBAAkB;QACrB,MAAMC,WAAW,GAAGnE,QAAQ,CAAC,cAAc,CAAC,IAAI,WAAW;QAC3D,MAAMoE,eAAe,GAAGD,WAAW,CAACjB,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QACzF,OAAO,GAAGkB,eAAe,8BAA8B;MAEzD;QACE,OAAO,GAAGrE,OAAO,IAAI+C,SAAS,MAAM;IACxC;EACF;;EAEA;EACA,MAAMuB,uBAAuBA,CAACrE,QAAQ,EAAED,OAAO,EAAEE,QAAQ,GAAG,IAAI,EAAE;IAChE,IAAI;MACF;MACA,MAAMqE,WAAW,GAAG,MAAM,IAAI,CAAClF,cAAc,CAAC,CAAC;MAE/C,IAAIkF,WAAW,EAAE;QACf1E,OAAO,CAAC2E,GAAG,CAAC,2BAA2B,CAAC;QACxC,MAAM3D,KAAK,GAAG,MAAM,IAAI,CAACd,kBAAkB,CAACC,OAAO,EAAEC,QAAQ,EAAEC,QAAQ,CAAC;QACxE,MAAM,IAAI,CAACgC,oBAAoB,CAACrB,KAAK,CAAC;QACtC,MAAMG,QAAQ,GAAG,IAAI,CAAC8B,gBAAgB,CAAC9C,OAAO,EAAEC,QAAQ,CAAC;QACzD,OAAO,MAAM,IAAI,CAACc,WAAW,CAACF,KAAK,EAAEG,QAAQ,CAAC;MAChD,CAAC,MAAM;QACLnB,OAAO,CAAC2E,GAAG,CAAC,0CAA0C,CAAC;QACvD,OAAO,MAAM,IAAI,CAACC,iBAAiB,CAACxE,QAAQ,EAAED,OAAO,EAAEE,QAAQ,CAAC;MAClE;IACF,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mDAAmD,EAAEA,KAAK,CAAC;MACzE,IAAI;QACF,OAAO,MAAM,IAAI,CAAC6E,iBAAiB,CAACxE,QAAQ,EAAED,OAAO,EAAEE,QAAQ,CAAC;MAClE,CAAC,CAAC,OAAOwE,WAAW,EAAE;QACpB7E,OAAO,CAACD,KAAK,CAAC,oDAAoD,EAAE8E,WAAW,CAAC;QAChF,IAAI;UACF,OAAO,MAAM,IAAI,CAACC,eAAe,CAAC1E,QAAQ,EAAED,OAAO,EAAEE,QAAQ,CAAC;QAChE,CAAC,CAAC,OAAO0E,SAAS,EAAE;UAClB/E,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEgF,SAAS,CAAC;UAC9D,MAAM,IAAInE,KAAK,CAAC,yDAAyDb,KAAK,CAACc,OAAO,GAAG,CAAC;QAC5F;MACF;IACF;EACF;AACF;AAEA,MAAMmE,UAAU,GAAG,IAAI9F,UAAU,CAAC,CAAC;AACnC,eAAe8F,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}