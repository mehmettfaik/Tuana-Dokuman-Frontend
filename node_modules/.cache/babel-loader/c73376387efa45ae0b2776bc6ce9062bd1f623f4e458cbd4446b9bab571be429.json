{"ast":null,"code":"// services/pdfService.js\nclass PDFService {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n    this.legacyBaseURL = process.env.REACT_APP_LEGACY_API_URL || 'http://localhost:3000';\n  }\n\n  // Backend bağlantısını test et\n  async testConnection() {\n    try {\n      const response = await fetch(`${this.baseURL}/api/health`, {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.ok;\n    } catch (error) {\n      console.warn('New API not available, will use legacy API');\n      return false;\n    }\n  }\n\n  // Demo/Mock PDF generation (offline çalışma için)\n  async generatePDFDemo(formData, docType, language = 'en') {\n    try {\n      console.log('Using demo PDF generation (offline mode)');\n\n      // Demo veri hazırlama\n      const demoContent = this.generateDemoContent(formData, docType, language);\n\n      // Mock PDF blob oluştur (gerçek PDF yerine demo content)\n      const pdfContent = `%PDF-1.4\n1 0 obj\n<<\n/Type /Catalog\n/Pages 2 0 R\n>>\nendobj\n2 0 obj\n<<\n/Type /Pages\n/Kids [3 0 R]\n/Count 1\n>>\nendobj\n3 0 obj\n<<\n/Type /Page\n/Parent 2 0 R\n/MediaBox [0 0 612 792]\n/Resources <<\n/Font <<\n/F1 4 0 R\n>>\n>>\n/Contents 5 0 R\n>>\nendobj\n4 0 obj\n<<\n/Type /Font\n/Subtype /Type1\n/BaseFont /Helvetica\n>>\nendobj\n5 0 obj\n<<\n/Length 200\n>>\nstream\nBT\n/F1 24 Tf\n100 700 Td\n(DEMO PDF - ${docType.toUpperCase()}) Tj\n0 -50 Td\n/F1 12 Tf\n(Bu demo PDF'dir. Backend servisi aktif olduğunda) Tj\n0 -20 Td\n(gerçek PDF üretilecektir.) Tj\n0 -40 Td\n(Form Data: ${Object.keys(formData).length} alan dolduruldu) Tj\n0 -20 Td\n(Dil: ${language}) Tj\n0 -20 Td\n(Tarih: ${new Date().toLocaleDateString('tr-TR')}) Tj\nET\nendstream\nendobj\nxref\n0 6\n0000000000 65535 f \n0000000009 00000 n \n0000000058 00000 n \n0000000115 00000 n \n0000000259 00000 n \n0000000329 00000 n \ntrailer\n<<\n/Size 6\n/Root 1 0 R\n>>\nstartxref\n599\n%%EOF`;\n\n      // PDF blob oluştur\n      const blob = new Blob([pdfContent], {\n        type: 'application/pdf'\n      });\n\n      // Dosya adı oluştur\n      const fileName = this.generateFileName(docType, formData);\n\n      // Dosyayı indir\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = `DEMO_${fileName}`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      return true;\n    } catch (error) {\n      console.error('Demo PDF generation error:', error);\n      throw error;\n    }\n  }\n\n  // Demo içerik oluştur\n  generateDemoContent(formData, docType, language) {\n    const fields = Object.keys(formData).length;\n    const timestamp = new Date().toLocaleDateString('tr-TR');\n    return {\n      docType,\n      language,\n      fields,\n      timestamp,\n      message: 'Bu bir demo PDF\\'dir. Backend servisi aktif olduğunda gerçek PDF üretilecektir.'\n    };\n  }\n\n  // Legacy PDF generation (fallback)\n  async generatePDFLegacy(formData, docType, language = 'en') {\n    try {\n      const response = await fetch(`${this.legacyBaseURL}/api/generatePDF`, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          docType,\n          formData,\n          language\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Legacy API error! status: ${response.status}`);\n      }\n      const blob = await response.blob();\n      if (blob.size === 0) {\n        throw new Error('Received empty PDF file from legacy server');\n      }\n\n      // Dosyayı indir\n      const fileName = this.generateFileName(docType, formData);\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = fileName;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      return true;\n    } catch (error) {\n      console.error('Legacy PDF generation error:', error);\n      throw error;\n    }\n  }\n\n  // 1. PDF üretimini başlat\n  async startPDFGeneration(docType, formData, language = 'en') {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/start`, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          docType,\n          formData,\n          language\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      return result.jobId;\n    } catch (error) {\n      console.error('Error starting PDF generation:', error);\n      throw error;\n    }\n  }\n\n  // 2. PDF durumunu kontrol et\n  async checkPDFStatus(jobId) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/status/${jobId}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking PDF status:', error);\n      throw error;\n    }\n  }\n\n  // 3. PDF'i indir\n  async downloadPDF(jobId, fileName = 'document.pdf') {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/download/${jobId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const blob = await response.blob();\n\n      // Blob'un boyutunu kontrol et\n      if (blob.size === 0) {\n        throw new Error('Received empty PDF file from server');\n      }\n\n      // Dosyayı indir\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = fileName;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      return true;\n    } catch (error) {\n      console.error('Error downloading PDF:', error);\n      throw error;\n    }\n  }\n\n  // Polling ile durum kontrolü (otomatik kontrol)\n  async waitForPDFCompletion(jobId, onProgress = null, timeout = 60000) {\n    const startTime = Date.now();\n    const pollInterval = 1000; // 1 saniye\n\n    return new Promise((resolve, reject) => {\n      const poll = async () => {\n        try {\n          if (Date.now() - startTime > timeout) {\n            reject(new Error('PDF generation timeout'));\n            return;\n          }\n          const status = await this.checkPDFStatus(jobId);\n\n          // Progress callback'i varsa çağır\n          if (onProgress) {\n            onProgress(status);\n          }\n          if (status.status === 'completed') {\n            resolve(status);\n          } else if (status.status === 'failed') {\n            reject(new Error(status.error || 'PDF generation failed'));\n          } else {\n            // Hala pending/processing, tekrar kontrol et\n            setTimeout(poll, pollInterval);\n          }\n        } catch (error) {\n          reject(error);\n        }\n      };\n      poll();\n    });\n  }\n\n  // Form type'a göre dosya adı oluştur\n  generateFileName(docType, formData) {\n    const timestamp = Date.now();\n    switch (docType) {\n      case 'proforma-invoice':\n        const proformaNumber = formData['PROFORMA INVOICE NUMBER'] || 'Proforma';\n        const proformaCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safeProformaName = `${proformaNumber}_${proformaCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeProformaName}_Proforma-Invoice.pdf`;\n      case 'invoice':\n        const invoiceNumber = formData['INVOICE NUMBER'] || 'Invoice';\n        const invoiceCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safeInvoiceName = `${invoiceNumber}_${invoiceCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeInvoiceName}_Invoice.pdf`;\n      case 'packing-list':\n        const packingInvoiceNumber = formData['INVOICE NUMBER'] || 'No-Invoice-Number';\n        const packingCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safePackingName = `${packingInvoiceNumber}_${packingCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safePackingName}_Packing-List.pdf`;\n      case 'credit-note':\n        const creditNumber = formData['CREDIT NOTE NUMBER'] || 'Credit-Note';\n        const safeCreditNumber = creditNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeCreditNumber}_Credit-Note.pdf`;\n      case 'debit-note':\n        const debitNumber = formData['DEBIT NOTE NUMBER'] || 'Debit-Note';\n        const safeDebitNumber = debitNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeDebitNumber}_Debit-Note.pdf`;\n      case 'order-confirmation':\n        const orderConfirmationNumber = formData['ORDER CONFIRMATION NUMBER'] || 'Order-Confirmation';\n        const safeOrderConfirmationNumber = orderConfirmationNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeOrderConfirmationNumber}_Order-Confirmation.pdf`;\n      case 'siparis':\n        const orderNumber = formData['ORDER NUMBER'] || 'No-Order-Number';\n        const safeOrderNumber = orderNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeOrderNumber}_Siparis-Formu.pdf`;\n      case 'price-offer':\n        const priceOfferNumber = formData['PRICE OFFER NUMBER'] || 'No-Price-Offer-Number';\n        const safePriceOfferNumber = priceOfferNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safePriceOfferNumber}_Price-Offer.pdf`;\n      case 'fabric-technical':\n        const articleCode = formData['ARTICLE CODE'] || 'Technical';\n        const safeArticleCode = articleCode.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeArticleCode}_Technical-Specification.pdf`;\n      default:\n        return `${docType}_${timestamp}.pdf`;\n    }\n  }\n\n  // Ana PDF üretim fonksiyonu - Fallback desteği ile\n  async generatePDFWithFallback(formData, docType, language = 'en') {\n    try {\n      // Önce yeni API'yi dene\n      const isConnected = await this.testConnection();\n      if (isConnected) {\n        console.log('Using new 3-stage PDF API');\n        const jobId = await this.startPDFGeneration(docType, formData, language);\n        await this.waitForPDFCompletion(jobId);\n        const fileName = this.generateFileName(docType, formData);\n        return await this.downloadPDF(jobId, fileName);\n      } else {\n        console.log('New API not available, trying legacy API');\n        return await this.generatePDFLegacy(formData, docType, language);\n      }\n    } catch (error) {\n      console.error('Primary PDF generation failed, trying legacy API:', error);\n      try {\n        return await this.generatePDFLegacy(formData, docType, language);\n      } catch (legacyError) {\n        console.error('Legacy API also failed, using demo PDF generation:', legacyError);\n        try {\n          return await this.generatePDFDemo(formData, docType, language);\n        } catch (demoError) {\n          console.error('All PDF generation methods failed:', demoError);\n          throw new Error(`PDF oluşturulamadı. Tüm sistemler devre dışı. (Error: ${error.message})`);\n        }\n      }\n    }\n  }\n}\nconst pdfService = new PDFService();\nexport default pdfService;","map":{"version":3,"names":["PDFService","constructor","baseURL","process","env","REACT_APP_API_URL","legacyBaseURL","REACT_APP_LEGACY_API_URL","testConnection","response","fetch","method","mode","headers","ok","error","console","warn","generatePDFDemo","formData","docType","language","log","demoContent","generateDemoContent","pdfContent","toUpperCase","Object","keys","length","Date","toLocaleDateString","blob","Blob","type","fileName","generateFileName","url","window","URL","createObjectURL","a","document","createElement","style","display","href","download","body","appendChild","click","revokeObjectURL","removeChild","fields","timestamp","message","generatePDFLegacy","JSON","stringify","Error","status","size","startPDFGeneration","errorData","json","catch","result","jobId","checkPDFStatus","downloadPDF","waitForPDFCompletion","onProgress","timeout","startTime","now","pollInterval","Promise","resolve","reject","poll","setTimeout","proformaNumber","proformaCompany","safeProformaName","replace","invoiceNumber","invoiceCompany","safeInvoiceName","packingInvoiceNumber","packingCompany","safePackingName","creditNumber","safeCreditNumber","debitNumber","safeDebitNumber","orderConfirmationNumber","safeOrderConfirmationNumber","orderNumber","safeOrderNumber","priceOfferNumber","safePriceOfferNumber","articleCode","safeArticleCode","generatePDFWithFallback","isConnected","legacyError","demoError","pdfService"],"sources":["/Users/mehmettfaik/Documents/GitHub/Tuana-Dokuman-Frontend/src/services/pdfService.js"],"sourcesContent":["// services/pdfService.js\nclass PDFService {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n    this.legacyBaseURL = process.env.REACT_APP_LEGACY_API_URL || 'http://localhost:3000';\n  }\n\n  // Backend bağlantısını test et\n  async testConnection() {\n    try {\n      const response = await fetch(`${this.baseURL}/api/health`, {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      return response.ok;\n    } catch (error) {\n      console.warn('New API not available, will use legacy API');\n      return false;\n    }\n  }\n\n  // Demo/Mock PDF generation (offline çalışma için)\n  async generatePDFDemo(formData, docType, language = 'en') {\n    try {\n      console.log('Using demo PDF generation (offline mode)');\n      \n      // Demo veri hazırlama\n      const demoContent = this.generateDemoContent(formData, docType, language);\n      \n      // Mock PDF blob oluştur (gerçek PDF yerine demo content)\n      const pdfContent = `%PDF-1.4\n1 0 obj\n<<\n/Type /Catalog\n/Pages 2 0 R\n>>\nendobj\n2 0 obj\n<<\n/Type /Pages\n/Kids [3 0 R]\n/Count 1\n>>\nendobj\n3 0 obj\n<<\n/Type /Page\n/Parent 2 0 R\n/MediaBox [0 0 612 792]\n/Resources <<\n/Font <<\n/F1 4 0 R\n>>\n>>\n/Contents 5 0 R\n>>\nendobj\n4 0 obj\n<<\n/Type /Font\n/Subtype /Type1\n/BaseFont /Helvetica\n>>\nendobj\n5 0 obj\n<<\n/Length 200\n>>\nstream\nBT\n/F1 24 Tf\n100 700 Td\n(DEMO PDF - ${docType.toUpperCase()}) Tj\n0 -50 Td\n/F1 12 Tf\n(Bu demo PDF'dir. Backend servisi aktif olduğunda) Tj\n0 -20 Td\n(gerçek PDF üretilecektir.) Tj\n0 -40 Td\n(Form Data: ${Object.keys(formData).length} alan dolduruldu) Tj\n0 -20 Td\n(Dil: ${language}) Tj\n0 -20 Td\n(Tarih: ${new Date().toLocaleDateString('tr-TR')}) Tj\nET\nendstream\nendobj\nxref\n0 6\n0000000000 65535 f \n0000000009 00000 n \n0000000058 00000 n \n0000000115 00000 n \n0000000259 00000 n \n0000000329 00000 n \ntrailer\n<<\n/Size 6\n/Root 1 0 R\n>>\nstartxref\n599\n%%EOF`;\n\n      // PDF blob oluştur\n      const blob = new Blob([pdfContent], { type: 'application/pdf' });\n      \n      // Dosya adı oluştur\n      const fileName = this.generateFileName(docType, formData);\n      \n      // Dosyayı indir\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = `DEMO_${fileName}`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      return true;\n    } catch (error) {\n      console.error('Demo PDF generation error:', error);\n      throw error;\n    }\n  }\n\n  // Demo içerik oluştur\n  generateDemoContent(formData, docType, language) {\n    const fields = Object.keys(formData).length;\n    const timestamp = new Date().toLocaleDateString('tr-TR');\n    \n    return {\n      docType,\n      language,\n      fields,\n      timestamp,\n      message: 'Bu bir demo PDF\\'dir. Backend servisi aktif olduğunda gerçek PDF üretilecektir.'\n    };\n  }\n\n  // Legacy PDF generation (fallback)\n  async generatePDFLegacy(formData, docType, language = 'en') {\n    try {\n      const response = await fetch(`${this.legacyBaseURL}/api/generatePDF`, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          docType,\n          formData,\n          language\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Legacy API error! status: ${response.status}`);\n      }\n\n      const blob = await response.blob();\n      \n      if (blob.size === 0) {\n        throw new Error('Received empty PDF file from legacy server');\n      }\n      \n      // Dosyayı indir\n      const fileName = this.generateFileName(docType, formData);\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = fileName;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      return true;\n    } catch (error) {\n      console.error('Legacy PDF generation error:', error);\n      throw error;\n    }\n  }\n\n  // 1. PDF üretimini başlat\n  async startPDFGeneration(docType, formData, language = 'en') {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/start`, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          docType,\n          formData,\n          language\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      return result.jobId;\n    } catch (error) {\n      console.error('Error starting PDF generation:', error);\n      throw error;\n    }\n  }\n\n  // 2. PDF durumunu kontrol et\n  async checkPDFStatus(jobId) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/status/${jobId}`);\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking PDF status:', error);\n      throw error;\n    }\n  }\n\n  // 3. PDF'i indir\n  async downloadPDF(jobId, fileName = 'document.pdf') {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/download/${jobId}`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const blob = await response.blob();\n      \n      // Blob'un boyutunu kontrol et\n      if (blob.size === 0) {\n        throw new Error('Received empty PDF file from server');\n      }\n      \n      // Dosyayı indir\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = fileName;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      return true;\n    } catch (error) {\n      console.error('Error downloading PDF:', error);\n      throw error;\n    }\n  }\n\n  // Polling ile durum kontrolü (otomatik kontrol)\n  async waitForPDFCompletion(jobId, onProgress = null, timeout = 60000) {\n    const startTime = Date.now();\n    const pollInterval = 1000; // 1 saniye\n\n    return new Promise((resolve, reject) => {\n      const poll = async () => {\n        try {\n          if (Date.now() - startTime > timeout) {\n            reject(new Error('PDF generation timeout'));\n            return;\n          }\n\n          const status = await this.checkPDFStatus(jobId);\n          \n          // Progress callback'i varsa çağır\n          if (onProgress) {\n            onProgress(status);\n          }\n\n          if (status.status === 'completed') {\n            resolve(status);\n          } else if (status.status === 'failed') {\n            reject(new Error(status.error || 'PDF generation failed'));\n          } else {\n            // Hala pending/processing, tekrar kontrol et\n            setTimeout(poll, pollInterval);\n          }\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      poll();\n    });\n  }\n\n  // Form type'a göre dosya adı oluştur\n  generateFileName(docType, formData) {\n    const timestamp = Date.now();\n    \n    switch (docType) {\n      case 'proforma-invoice':\n        const proformaNumber = formData['PROFORMA INVOICE NUMBER'] || 'Proforma';\n        const proformaCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safeProformaName = `${proformaNumber}_${proformaCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeProformaName}_Proforma-Invoice.pdf`;\n        \n      case 'invoice':\n        const invoiceNumber = formData['INVOICE NUMBER'] || 'Invoice';\n        const invoiceCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safeInvoiceName = `${invoiceNumber}_${invoiceCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeInvoiceName}_Invoice.pdf`;\n        \n      case 'packing-list':\n        const packingInvoiceNumber = formData['INVOICE NUMBER'] || 'No-Invoice-Number';\n        const packingCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safePackingName = `${packingInvoiceNumber}_${packingCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safePackingName}_Packing-List.pdf`;\n        \n      case 'credit-note':\n        const creditNumber = formData['CREDIT NOTE NUMBER'] || 'Credit-Note';\n        const safeCreditNumber = creditNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeCreditNumber}_Credit-Note.pdf`;\n        \n      case 'debit-note':\n        const debitNumber = formData['DEBIT NOTE NUMBER'] || 'Debit-Note';\n        const safeDebitNumber = debitNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeDebitNumber}_Debit-Note.pdf`;\n        \n      case 'order-confirmation':\n        const orderConfirmationNumber = formData['ORDER CONFIRMATION NUMBER'] || 'Order-Confirmation';\n        const safeOrderConfirmationNumber = orderConfirmationNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeOrderConfirmationNumber}_Order-Confirmation.pdf`;\n        \n      case 'siparis':\n        const orderNumber = formData['ORDER NUMBER'] || 'No-Order-Number';\n        const safeOrderNumber = orderNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeOrderNumber}_Siparis-Formu.pdf`;\n        \n      case 'price-offer':\n        const priceOfferNumber = formData['PRICE OFFER NUMBER'] || 'No-Price-Offer-Number';\n        const safePriceOfferNumber = priceOfferNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safePriceOfferNumber}_Price-Offer.pdf`;\n        \n      case 'fabric-technical':\n        const articleCode = formData['ARTICLE CODE'] || 'Technical';\n        const safeArticleCode = articleCode.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeArticleCode}_Technical-Specification.pdf`;\n        \n      default:\n        return `${docType}_${timestamp}.pdf`;\n    }\n  }\n\n  // Ana PDF üretim fonksiyonu - Fallback desteği ile\n  async generatePDFWithFallback(formData, docType, language = 'en') {\n    try {\n      // Önce yeni API'yi dene\n      const isConnected = await this.testConnection();\n      \n      if (isConnected) {\n        console.log('Using new 3-stage PDF API');\n        const jobId = await this.startPDFGeneration(docType, formData, language);\n        await this.waitForPDFCompletion(jobId);\n        const fileName = this.generateFileName(docType, formData);\n        return await this.downloadPDF(jobId, fileName);\n      } else {\n        console.log('New API not available, trying legacy API');\n        return await this.generatePDFLegacy(formData, docType, language);\n      }\n    } catch (error) {\n      console.error('Primary PDF generation failed, trying legacy API:', error);\n      try {\n        return await this.generatePDFLegacy(formData, docType, language);\n      } catch (legacyError) {\n        console.error('Legacy API also failed, using demo PDF generation:', legacyError);\n        try {\n          return await this.generatePDFDemo(formData, docType, language);\n        } catch (demoError) {\n          console.error('All PDF generation methods failed:', demoError);\n          throw new Error(`PDF oluşturulamadı. Tüm sistemler devre dışı. (Error: ${error.message})`);\n        }\n      }\n    }\n  }\n}\n\nconst pdfService = new PDFService();\nexport default pdfService;\n"],"mappings":"AAAA;AACA,MAAMA,UAAU,CAAC;EACfC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;IACvE,IAAI,CAACC,aAAa,GAAGH,OAAO,CAACC,GAAG,CAACG,wBAAwB,IAAI,uBAAuB;EACtF;;EAEA;EACA,MAAMC,cAAcA,CAAA,EAAG;IACrB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACR,OAAO,aAAa,EAAE;QACzDS,MAAM,EAAE,KAAK;QACbC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,OAAOJ,QAAQ,CAACK,EAAE;IACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,4CAA4C,CAAC;MAC1D,OAAO,KAAK;IACd;EACF;;EAEA;EACA,MAAMC,eAAeA,CAACC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,GAAG,IAAI,EAAE;IACxD,IAAI;MACFL,OAAO,CAACM,GAAG,CAAC,0CAA0C,CAAC;;MAEvD;MACA,MAAMC,WAAW,GAAG,IAAI,CAACC,mBAAmB,CAACL,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,CAAC;;MAEzE;MACA,MAAMI,UAAU,GAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAcL,OAAO,CAACM,WAAW,CAAC,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,cAAcC,MAAM,CAACC,IAAI,CAACT,QAAQ,CAAC,CAACU,MAAM;AAC1C;AACA,QAAQR,QAAQ;AAChB;AACA,UAAU,IAAIS,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,OAAO,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;MAEA;MACA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACR,UAAU,CAAC,EAAE;QAAES,IAAI,EAAE;MAAkB,CAAC,CAAC;;MAEhE;MACA,MAAMC,QAAQ,GAAG,IAAI,CAACC,gBAAgB,CAAChB,OAAO,EAAED,QAAQ,CAAC;;MAEzD;MACA,MAAMkB,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACR,IAAI,CAAC;MAC5C,MAAMS,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACrCF,CAAC,CAACG,KAAK,CAACC,OAAO,GAAG,MAAM;MACxBJ,CAAC,CAACK,IAAI,GAAGT,GAAG;MACZI,CAAC,CAACM,QAAQ,GAAG,QAAQZ,QAAQ,EAAE;MAC/BO,QAAQ,CAACM,IAAI,CAACC,WAAW,CAACR,CAAC,CAAC;MAC5BA,CAAC,CAACS,KAAK,CAAC,CAAC;MACTZ,MAAM,CAACC,GAAG,CAACY,eAAe,CAACd,GAAG,CAAC;MAC/BK,QAAQ,CAACM,IAAI,CAACI,WAAW,CAACX,CAAC,CAAC;MAE5B,OAAO,IAAI;IACb,CAAC,CAAC,OAAO1B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF;;EAEA;EACAS,mBAAmBA,CAACL,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,EAAE;IAC/C,MAAMgC,MAAM,GAAG1B,MAAM,CAACC,IAAI,CAACT,QAAQ,CAAC,CAACU,MAAM;IAC3C,MAAMyB,SAAS,GAAG,IAAIxB,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,OAAO,CAAC;IAExD,OAAO;MACLX,OAAO;MACPC,QAAQ;MACRgC,MAAM;MACNC,SAAS;MACTC,OAAO,EAAE;IACX,CAAC;EACH;;EAEA;EACA,MAAMC,iBAAiBA,CAACrC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,GAAG,IAAI,EAAE;IAC1D,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACJ,aAAa,kBAAkB,EAAE;QACpEK,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDmC,IAAI,EAAES,IAAI,CAACC,SAAS,CAAC;UACnBtC,OAAO;UACPD,QAAQ;UACRE;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACZ,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAI6C,KAAK,CAAC,6BAA6BlD,QAAQ,CAACmD,MAAM,EAAE,CAAC;MACjE;MAEA,MAAM5B,IAAI,GAAG,MAAMvB,QAAQ,CAACuB,IAAI,CAAC,CAAC;MAElC,IAAIA,IAAI,CAAC6B,IAAI,KAAK,CAAC,EAAE;QACnB,MAAM,IAAIF,KAAK,CAAC,4CAA4C,CAAC;MAC/D;;MAEA;MACA,MAAMxB,QAAQ,GAAG,IAAI,CAACC,gBAAgB,CAAChB,OAAO,EAAED,QAAQ,CAAC;MACzD,MAAMkB,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACR,IAAI,CAAC;MAC5C,MAAMS,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACrCF,CAAC,CAACG,KAAK,CAACC,OAAO,GAAG,MAAM;MACxBJ,CAAC,CAACK,IAAI,GAAGT,GAAG;MACZI,CAAC,CAACM,QAAQ,GAAGZ,QAAQ;MACrBO,QAAQ,CAACM,IAAI,CAACC,WAAW,CAACR,CAAC,CAAC;MAC5BA,CAAC,CAACS,KAAK,CAAC,CAAC;MACTZ,MAAM,CAACC,GAAG,CAACY,eAAe,CAACd,GAAG,CAAC;MAC/BK,QAAQ,CAACM,IAAI,CAACI,WAAW,CAACX,CAAC,CAAC;MAE5B,OAAO,IAAI;IACb,CAAC,CAAC,OAAO1B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAM+C,kBAAkBA,CAAC1C,OAAO,EAAED,QAAQ,EAAEE,QAAQ,GAAG,IAAI,EAAE;IAC3D,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACR,OAAO,gBAAgB,EAAE;QAC5DS,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDmC,IAAI,EAAES,IAAI,CAACC,SAAS,CAAC;UACnBtC,OAAO;UACPD,QAAQ;UACRE;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACZ,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAMiD,SAAS,GAAG,MAAMtD,QAAQ,CAACuD,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,IAAIN,KAAK,CAACI,SAAS,CAACR,OAAO,IAAI,uBAAuB9C,QAAQ,CAACmD,MAAM,EAAE,CAAC;MAChF;MAEA,MAAMM,MAAM,GAAG,MAAMzD,QAAQ,CAACuD,IAAI,CAAC,CAAC;MACpC,OAAOE,MAAM,CAACC,KAAK;IACrB,CAAC,CAAC,OAAOpD,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMqD,cAAcA,CAACD,KAAK,EAAE;IAC1B,IAAI;MACF,MAAM1D,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACR,OAAO,mBAAmBiE,KAAK,EAAE,CAAC;MAEvE,IAAI,CAAC1D,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAMiD,SAAS,GAAG,MAAMtD,QAAQ,CAACuD,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIL,KAAK,CAACI,SAAS,CAACR,OAAO,IAAI,uBAAuB9C,QAAQ,CAACmD,MAAM,EAAE,CAAC;MAChF;MAEA,OAAO,MAAMnD,QAAQ,CAACuD,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOjD,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMsD,WAAWA,CAACF,KAAK,EAAEhC,QAAQ,GAAG,cAAc,EAAE;IAClD,IAAI;MACF,MAAM1B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACR,OAAO,qBAAqBiE,KAAK,EAAE,CAAC;MAEzE,IAAI,CAAC1D,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAI6C,KAAK,CAAC,uBAAuBlD,QAAQ,CAACmD,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAM5B,IAAI,GAAG,MAAMvB,QAAQ,CAACuB,IAAI,CAAC,CAAC;;MAElC;MACA,IAAIA,IAAI,CAAC6B,IAAI,KAAK,CAAC,EAAE;QACnB,MAAM,IAAIF,KAAK,CAAC,qCAAqC,CAAC;MACxD;;MAEA;MACA,MAAMtB,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACR,IAAI,CAAC;MAC5C,MAAMS,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACrCF,CAAC,CAACG,KAAK,CAACC,OAAO,GAAG,MAAM;MACxBJ,CAAC,CAACK,IAAI,GAAGT,GAAG;MACZI,CAAC,CAACM,QAAQ,GAAGZ,QAAQ;MACrBO,QAAQ,CAACM,IAAI,CAACC,WAAW,CAACR,CAAC,CAAC;MAC5BA,CAAC,CAACS,KAAK,CAAC,CAAC;MACTZ,MAAM,CAACC,GAAG,CAACY,eAAe,CAACd,GAAG,CAAC;MAC/BK,QAAQ,CAACM,IAAI,CAACI,WAAW,CAACX,CAAC,CAAC;MAE5B,OAAO,IAAI;IACb,CAAC,CAAC,OAAO1B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMuD,oBAAoBA,CAACH,KAAK,EAAEI,UAAU,GAAG,IAAI,EAAEC,OAAO,GAAG,KAAK,EAAE;IACpE,MAAMC,SAAS,GAAG3C,IAAI,CAAC4C,GAAG,CAAC,CAAC;IAC5B,MAAMC,YAAY,GAAG,IAAI,CAAC,CAAC;;IAE3B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,IAAI,GAAG,MAAAA,CAAA,KAAY;QACvB,IAAI;UACF,IAAIjD,IAAI,CAAC4C,GAAG,CAAC,CAAC,GAAGD,SAAS,GAAGD,OAAO,EAAE;YACpCM,MAAM,CAAC,IAAInB,KAAK,CAAC,wBAAwB,CAAC,CAAC;YAC3C;UACF;UAEA,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACQ,cAAc,CAACD,KAAK,CAAC;;UAE/C;UACA,IAAII,UAAU,EAAE;YACdA,UAAU,CAACX,MAAM,CAAC;UACpB;UAEA,IAAIA,MAAM,CAACA,MAAM,KAAK,WAAW,EAAE;YACjCiB,OAAO,CAACjB,MAAM,CAAC;UACjB,CAAC,MAAM,IAAIA,MAAM,CAACA,MAAM,KAAK,QAAQ,EAAE;YACrCkB,MAAM,CAAC,IAAInB,KAAK,CAACC,MAAM,CAAC7C,KAAK,IAAI,uBAAuB,CAAC,CAAC;UAC5D,CAAC,MAAM;YACL;YACAiE,UAAU,CAACD,IAAI,EAAEJ,YAAY,CAAC;UAChC;QACF,CAAC,CAAC,OAAO5D,KAAK,EAAE;UACd+D,MAAM,CAAC/D,KAAK,CAAC;QACf;MACF,CAAC;MAEDgE,IAAI,CAAC,CAAC;IACR,CAAC,CAAC;EACJ;;EAEA;EACA3C,gBAAgBA,CAAChB,OAAO,EAAED,QAAQ,EAAE;IAClC,MAAMmC,SAAS,GAAGxB,IAAI,CAAC4C,GAAG,CAAC,CAAC;IAE5B,QAAQtD,OAAO;MACb,KAAK,kBAAkB;QACrB,MAAM6D,cAAc,GAAG9D,QAAQ,CAAC,yBAAyB,CAAC,IAAI,UAAU;QACxE,MAAM+D,eAAe,GAAG/D,QAAQ,CAAC,sBAAsB,CAAC,IAAI,SAAS;QACrE,MAAMgE,gBAAgB,GAAG,GAAGF,cAAc,IAAIC,eAAe,EAAE,CAACE,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QACrH,OAAO,GAAGD,gBAAgB,uBAAuB;MAEnD,KAAK,SAAS;QACZ,MAAME,aAAa,GAAGlE,QAAQ,CAAC,gBAAgB,CAAC,IAAI,SAAS;QAC7D,MAAMmE,cAAc,GAAGnE,QAAQ,CAAC,sBAAsB,CAAC,IAAI,SAAS;QACpE,MAAMoE,eAAe,GAAG,GAAGF,aAAa,IAAIC,cAAc,EAAE,CAACF,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QAClH,OAAO,GAAGG,eAAe,cAAc;MAEzC,KAAK,cAAc;QACjB,MAAMC,oBAAoB,GAAGrE,QAAQ,CAAC,gBAAgB,CAAC,IAAI,mBAAmB;QAC9E,MAAMsE,cAAc,GAAGtE,QAAQ,CAAC,sBAAsB,CAAC,IAAI,SAAS;QACpE,MAAMuE,eAAe,GAAG,GAAGF,oBAAoB,IAAIC,cAAc,EAAE,CAACL,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QACzH,OAAO,GAAGM,eAAe,mBAAmB;MAE9C,KAAK,aAAa;QAChB,MAAMC,YAAY,GAAGxE,QAAQ,CAAC,oBAAoB,CAAC,IAAI,aAAa;QACpE,MAAMyE,gBAAgB,GAAGD,YAAY,CAACP,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QAC3F,OAAO,GAAGQ,gBAAgB,kBAAkB;MAE9C,KAAK,YAAY;QACf,MAAMC,WAAW,GAAG1E,QAAQ,CAAC,mBAAmB,CAAC,IAAI,YAAY;QACjE,MAAM2E,eAAe,GAAGD,WAAW,CAACT,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QACzF,OAAO,GAAGU,eAAe,iBAAiB;MAE5C,KAAK,oBAAoB;QACvB,MAAMC,uBAAuB,GAAG5E,QAAQ,CAAC,2BAA2B,CAAC,IAAI,oBAAoB;QAC7F,MAAM6E,2BAA2B,GAAGD,uBAAuB,CAACX,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QACjH,OAAO,GAAGY,2BAA2B,yBAAyB;MAEhE,KAAK,SAAS;QACZ,MAAMC,WAAW,GAAG9E,QAAQ,CAAC,cAAc,CAAC,IAAI,iBAAiB;QACjE,MAAM+E,eAAe,GAAGD,WAAW,CAACb,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QACzF,OAAO,GAAGc,eAAe,oBAAoB;MAE/C,KAAK,aAAa;QAChB,MAAMC,gBAAgB,GAAGhF,QAAQ,CAAC,oBAAoB,CAAC,IAAI,uBAAuB;QAClF,MAAMiF,oBAAoB,GAAGD,gBAAgB,CAACf,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QACnG,OAAO,GAAGgB,oBAAoB,kBAAkB;MAElD,KAAK,kBAAkB;QACrB,MAAMC,WAAW,GAAGlF,QAAQ,CAAC,cAAc,CAAC,IAAI,WAAW;QAC3D,MAAMmF,eAAe,GAAGD,WAAW,CAACjB,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QACzF,OAAO,GAAGkB,eAAe,8BAA8B;MAEzD;QACE,OAAO,GAAGlF,OAAO,IAAIkC,SAAS,MAAM;IACxC;EACF;;EAEA;EACA,MAAMiD,uBAAuBA,CAACpF,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,GAAG,IAAI,EAAE;IAChE,IAAI;MACF;MACA,MAAMmF,WAAW,GAAG,MAAM,IAAI,CAAChG,cAAc,CAAC,CAAC;MAE/C,IAAIgG,WAAW,EAAE;QACfxF,OAAO,CAACM,GAAG,CAAC,2BAA2B,CAAC;QACxC,MAAM6C,KAAK,GAAG,MAAM,IAAI,CAACL,kBAAkB,CAAC1C,OAAO,EAAED,QAAQ,EAAEE,QAAQ,CAAC;QACxE,MAAM,IAAI,CAACiD,oBAAoB,CAACH,KAAK,CAAC;QACtC,MAAMhC,QAAQ,GAAG,IAAI,CAACC,gBAAgB,CAAChB,OAAO,EAAED,QAAQ,CAAC;QACzD,OAAO,MAAM,IAAI,CAACkD,WAAW,CAACF,KAAK,EAAEhC,QAAQ,CAAC;MAChD,CAAC,MAAM;QACLnB,OAAO,CAACM,GAAG,CAAC,0CAA0C,CAAC;QACvD,OAAO,MAAM,IAAI,CAACkC,iBAAiB,CAACrC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,CAAC;MAClE;IACF,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mDAAmD,EAAEA,KAAK,CAAC;MACzE,IAAI;QACF,OAAO,MAAM,IAAI,CAACyC,iBAAiB,CAACrC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,CAAC;MAClE,CAAC,CAAC,OAAOoF,WAAW,EAAE;QACpBzF,OAAO,CAACD,KAAK,CAAC,oDAAoD,EAAE0F,WAAW,CAAC;QAChF,IAAI;UACF,OAAO,MAAM,IAAI,CAACvF,eAAe,CAACC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,CAAC;QAChE,CAAC,CAAC,OAAOqF,SAAS,EAAE;UAClB1F,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAE2F,SAAS,CAAC;UAC9D,MAAM,IAAI/C,KAAK,CAAC,yDAAyD5C,KAAK,CAACwC,OAAO,GAAG,CAAC;QAC5F;MACF;IACF;EACF;AACF;AAEA,MAAMoD,UAAU,GAAG,IAAI3G,UAAU,CAAC,CAAC;AACnC,eAAe2G,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}