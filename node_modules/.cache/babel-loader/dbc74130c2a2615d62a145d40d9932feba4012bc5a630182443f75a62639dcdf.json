{"ast":null,"code":"// src/api.js\nimport axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\nexport const generatePDF = async (docType, formData) => {\n  try {\n    const res = await api.post('/api/pdf/generate', {\n      docType,\n      formData\n    }, {\n      responseType: 'blob',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': '*/*'\n      },\n      timeout: 5000 // 5 saniye timeout\n    });\n    if (!res.data) {\n      throw new Error('No data received from server');\n    }\n    return res.data;\n  } catch (error) {\n    if (error.response) {\n      throw new Error(`Server error: ${error.response.status}`);\n    } else if (error.request) {\n      throw new Error('No response from server. Please check if the server is running.');\n    } else {\n      throw new Error('Error setting up the request');\n    }\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","headers","generatePDF","docType","formData","res","post","responseType","timeout","data","Error","error","response","status","request"],"sources":["/Users/mehmettfaik/Desktop/Frontend/frontend/src/api.js"],"sourcesContent":["// src/api.js\nimport axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  }\n});\n\nexport const generatePDF = async (docType, formData) => {\n  try {\n    const res = await api.post(\n      '/api/pdf/generate',\n      { docType, formData },\n      { \n        responseType: 'blob',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': '*/*'\n        },\n        timeout: 5000 // 5 saniye timeout\n      }\n    );\n    \n    if (!res.data) {\n      throw new Error('No data received from server');\n    }\n    \n    return res.data;\n  } catch (error) {\n    if (error.response) {\n      throw new Error(`Server error: ${error.response.status}`);\n    } else if (error.request) {\n      throw new Error('No response from server. Please check if the server is running.');\n    } else {\n      throw new Error('Error setting up the request');\n    }\n  }\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,OAAO,EAAEC,QAAQ,KAAK;EACtD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CACxB,mBAAmB,EACnB;MAAEH,OAAO;MAAEC;IAAS,CAAC,EACrB;MACEG,YAAY,EAAE,MAAM;MACpBN,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,QAAQ,EAAE;MACZ,CAAC;MACDO,OAAO,EAAE,IAAI,CAAC;IAChB,CACF,CAAC;IAED,IAAI,CAACH,GAAG,CAACI,IAAI,EAAE;MACb,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;IAEA,OAAOL,GAAG,CAACI,IAAI;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,IAAIA,KAAK,CAACC,QAAQ,EAAE;MAClB,MAAM,IAAIF,KAAK,CAAC,iBAAiBC,KAAK,CAACC,QAAQ,CAACC,MAAM,EAAE,CAAC;IAC3D,CAAC,MAAM,IAAIF,KAAK,CAACG,OAAO,EAAE;MACxB,MAAM,IAAIJ,KAAK,CAAC,iEAAiE,CAAC;IACpF,CAAC,MAAM;MACL,MAAM,IAAIA,KAAK,CAAC,8BAA8B,CAAC;IACjD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}