{"ast":null,"code":"// src/api.js\nimport axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:3001',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\nexport const generatePDF = async (docType, formData) => {\n  try {\n    const res = await api.post('/api/pdf/generate', {\n      docType,\n      formData\n    }, {\n      responseType: 'blob',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/pdf'\n      },\n      timeout: 10000 // 10 saniye timeout\n    });\n    if (!res.data) {\n      throw new Error('No data received from server');\n    }\n\n    // PDF blob'unu doğrula\n    console.log('Response content type:', res.headers['content-type']);\n    console.log('Response data type:', res.data.type);\n    console.log('Response data size:', res.data.size);\n    if (res.data.size === 0) {\n      throw new Error('Received empty file from server');\n    }\n    if (res.data.type && !res.data.type.includes('pdf') && !res.data.type.includes('octet-stream')) {\n      // Eğer response PDF değilse, muhtemelen hata mesajı JSON formatında gelmiştir\n      const text = await res.data.text();\n      try {\n        const errorData = JSON.parse(text);\n        throw new Error(errorData.message || 'Server returned non-PDF data');\n      } catch {\n        throw new Error('Server returned invalid PDF data');\n      }\n    }\n    return res.data;\n  } catch (error) {\n    console.error('PDF Generation Error:', error);\n    if (error.code === 'ECONNABORTED') {\n      throw new Error('Request timed out. Server is taking too long to respond.');\n    }\n    if (error.response) {\n      var _error$response$data;\n      // Server yanıt verdi ama hata döndü\n      const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || `Server error: ${error.response.status}`;\n      throw new Error(message);\n    } else if (error.request) {\n      // İstek yapıldı ama yanıt alınamadı\n      if (error.message.includes('Network Error')) {\n        throw new Error('Server is not accessible. Please check if the server is running on port 3001.');\n      }\n      throw new Error('No response received from server. Please try again.');\n    } else {\n      // İstek oluşturulurken hata oluştu\n      throw new Error(`Request failed: ${error.message}`);\n    }\n  }\n};\n\n/* \n\nconst express = require('express');\nconst cors = require('cors');\nconst fs = require('fs');\nconst path = require('path');\nconst { PDFDocument, StandardFonts, rgb } = require('pdf-lib');\n\nconst app = express();\n\n// CORS middleware - EN ÜSTTE OLMALI\napp.use(cors({\n  origin: '*',\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'Accept', 'X-Requested-With'],\n  exposedHeaders: ['Content-Type', 'Content-Length'],\n  credentials: false,\n  preflightContinue: false,\n  optionsSuccessStatus: 200\n}));\n\n// Manual CORS headers - extra güvenlik için\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With');\n  \n  if (req.method === 'OPTIONS') {\n    return res.sendStatus(200);\n  }\n  next();\n});\n\n// Body parser middleware\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Request logging\napp.use((req, res, next) => {\n  console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);\n  console.log('Headers:', req.headers);\n  if (req.body && Object.keys(req.body).length > 0) {\n    console.log('Body:', req.body);\n  }\n  next();\n});\n\n// Test endpoints first\napp.get('/', (req, res) => {\n  res.json({ \n    status: 'ok', \n    message: 'PDF API Server is running',\n    timestamp: new Date().toISOString(),\n    version: '1.0.0'\n  });\n});\n\napp.get('/test', (req, res) => {\n  res.json({ message: 'Test endpoint working' });\n});\n\n// PDF API endpoints\napp.get('/api/pdf/test', (req, res) => {\n  res.json({ \n    message: 'PDF API is working',\n    timestamp: new Date().toISOString()\n  });\n});\n\napp.post('/api/pdf/generate', async (req, res) => {\n  try {\n    console.log('PDF generation request received:', req.body);\n    \n    const { docType, formData } = req.body;\n\n    if (!docType) {\n      return res.status(400).json({ \n        error: 'docType is required',\n        received: req.body \n      });\n    }\n\n    // Türkçe karakterleri değiştir\n    const replaceTurkishChars = (text) => {\n      return text\n        .replace(/ğ/g, 'g').replace(/Ğ/g, 'G')\n        .replace(/ü/g, 'u').replace(/Ü/g, 'U')\n        .replace(/ş/g, 's').replace(/Ş/g, 'S')\n        .replace(/ı/g, 'i').replace(/İ/g, 'I')\n        .replace(/ö/g, 'o').replace(/Ö/g, 'O')\n        .replace(/ç/g, 'c').replace(/Ç/g, 'C');\n    };\n\n    // PDF oluşturma\n    console.log('Creating PDF document...');\n    const pdfDoc = await PDFDocument.create();\n    const page = pdfDoc.addPage([595, 842]); // A4 boyut\n    \n    console.log('Embedding fonts...');\n    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);\n    const fontBold = await pdfDoc.embedFont(StandardFonts.Helvetica); // Helvetica kullan\n    \n    // Logo yükleme fonksiyonu\n    let logoImage = null;\n    try {\n      // PNG logo dene\n      let logoPath = path.join(__dirname, 'logo.png');\n      let logoBytes = null;\n      let isJpg = false;\n      \n      if (fs.existsSync(logoPath)) {\n        logoBytes = fs.readFileSync(logoPath);\n      } else {\n        // JPG logo dene\n        logoPath = path.join(__dirname, 'logo.jpg');\n        if (fs.existsSync(logoPath)) {\n          logoBytes = fs.readFileSync(logoPath);\n          isJpg = true;\n        }\n      }\n      \n      if (logoBytes) {\n        if (isJpg) {\n          logoImage = await pdfDoc.embedJpg(logoBytes);\n        } else {\n          logoImage = await pdfDoc.embedPng(logoBytes);\n        }\n        console.log('Logo successfully loaded from:', logoPath);\n      } else {\n        console.log('Logo file not found. Looking for logo.png or logo.jpg in:', __dirname);\n      }\n    } catch (logoError) {\n      console.log('Logo loading error:', logoError.message);\n    }\n    \n    // Sayfa boyutları\n    const pageWidth = page.getWidth();\n    const pageHeight = page.getHeight();\n    \n    let y = pageHeight - 60; // Üst margin\n    \n    // HEADER - TUANA TEKSTIL\n    console.log('Adding header...');\n    \n    // TUANA TEKSTIL başlığı (solda) - ÖNCELİKLE YAZARIZ\n    page.drawText('TUANA TEKSTIL', {\n      x: 55,\n      y: y-5,\n      size: 35,\n      font: fontBold,\n      color: rgb(0, 0, 0),\n    });\n    \n    // Logo alanı (sağda)\n    if (logoImage) {\n      // Logo varsa çiz\n      const logoWidth = 25;\n      const logoHeight = 25;\n      page.drawImage(logoImage, {\n        x: pageWidth - 265,\n        y: y - 5,\n        width: logoWidth,\n        height: logoHeight,\n      });\n    } else {\n      // Logo yoksa placeholder çiz\n      page.drawRectangle({\n        x: pageWidth - 260,\n        y: y - 5,\n        width: 60,\n        height: 30,\n        borderColor: rgb(0.8, 0.8, 0.8),\n        borderWidth: 1,\n      });\n      page.drawText('LOGO', {\n        x: pageWidth - 235,\n        y: y + 5,\n        size: 10,\n        font: font,\n        color: rgb(0.5, 0.5, 0.5),\n      });\n    }\n    \n    y -= 30;\n    \n    // Ana çizgi TUANA TEKSTIL'in ALTINA\n    page.drawLine({\n      start: { x: 50, y: y+10 },\n      end: { x: pageWidth - 50, y: y+10 },\n      thickness: 1,\n      color: rgb(0, 0, 0),\n    });\n    \n    // ISSUE DATE (sağda) - çizginin altında\n    const currentDate = new Date().toLocaleDateString('en-GB');\n    page.drawText(`ISSUE DATE: ${currentDate}`, {\n      x: pageWidth - 155,\n      y: y + 40,\n      size: 8,\n      font: font,\n      color: rgb(0, 0, 0),\n    });\n    \n    // Dikey çizgi - TUANA TEKSTIL ile ISSUE DATE arasında\n    page.drawLine({\n      start: { x: pageWidth - 160, y: y + 55 },\n      end: { x: pageWidth - 160, y: y + 10 },\n      thickness: 1,\n      color: rgb(0, 0, 0),\n    });\n    \n    y -= 40;\n    \n    // FABRIC TECHNICAL SHEET alt başlığı\n    page.drawText('FABRIC TECHNICAL SHEET', {\n      x: 55,\n      y: y + 30,\n      size: 18,\n      font: fontBold,\n      color: rgb(0, 0, 0),\n    });\n    y += 15;\n    \n    // FORM TABLOSU\n    console.log('Creating form table...');\n    \n    const tableFields = [\n      'ARTICLE CODE:',\n      'COMPOSITION:',\n      'WEIGHT:',\n      'WIDTH / CUTABLE WIDTH:',\n      'CERTIFICATION:',\n      'CONSTRUCTION:',\n      'FINISH:',\n      'COLOUR:',\n      'JACQUARD PATTERN NAME:',\n      'MADE IN:',\n      'SHRINKAGE IN WARP:',\n      'SHRINKAGE IN WEFT:'\n    ];\n    \n    // Tablo çerçevesi\n    const tableStartY = y;\n    const tableHeight = tableFields.length * 25;\n    const tableWidth = pageWidth - 100;\n    \n    page.drawRectangle({\n      x: 50,\n      y: y - tableHeight,\n      width: tableWidth,\n      height: tableHeight,\n      borderColor: rgb(0, 0, 0),\n      borderWidth: 1,\n    });\n    \n    // Tablo satırları\n    tableFields.forEach((field, index) => {\n      const rowY = y - (index * 25);\n      \n      // Yatay çizgi\n      if (index > 0) {\n        page.drawLine({\n          start: { x: 50, y: rowY },\n          end: { x: 50 + tableWidth, y: rowY },\n          thickness: 0.5,\n          color: rgb(0, 0, 0),\n        });\n      }\n      \n      // Dikey çizgi (label ve value arasında)\n      page.drawLine({\n        start: { x: 220, y: rowY },\n        end: { x: 220, y: rowY - 25 },\n        thickness: 0.5,\n        color: rgb(0, 0, 0),\n      });\n      \n      // Label metni\n      page.drawText(field, {\n        x: 60,\n        y: rowY - 18,\n        size: 10,\n        font: fontBold,\n        color: rgb(0, 0, 0),\n      });\n      \n      // Value metni (form verilerinden gelecek)\n      if (formData) {\n        const fieldKey = field.replace(':', '').trim();\n        const value = formData[fieldKey] || '';\n        page.drawText(replaceTurkishChars(value.toString()), {\n          x: 230,\n          y: rowY - 18,\n          size: 10,\n          font: font,\n          color: rgb(0, 0, 0),\n        });\n      }\n    });\n    \n    y = y - tableHeight - 40;\n    \n    // WASH AND CARE INSTRUCTIONS bölümü\n    console.log('Adding wash and care section...');\n    \n    // Alt çizgi\n    page.drawLine({\n      start: { x: 50, y: y+10 },\n      end: { x: pageWidth - 50, y: y+10 },\n      thickness: 1,\n      color: rgb(0, 0, 0),\n    });\n    y -= 20;\n    \n    page.drawText('WASH AND CARE INSTRUCTIONS', {\n      x: 55,\n      y: y+10,\n      size: 16,\n      font: fontBold,\n      color: rgb(0, 0, 0),\n    });\n    y -= 30;\n    \n    // Yıkama iconları alanı - daha sonra eklenecek\n    page.drawRectangle({\n      x: 80,\n      y: y - 30,\n      width: 350,\n      height: 40,\n      borderColor: rgb(0.8, 0.8, 0.8),\n      borderWidth: 1,\n    });\n    page.drawText('WASHING ICONS WILL BE PLACED HERE', {\n      x: 150,\n      y: y - 15,\n      size: 10,\n      font: font,\n      color: rgb(0.5, 0.5, 0.5),\n    });\n    \n    y -= 50;\n    \n    // NOTES bölümü\n    page.drawLine({\n      start: { x: 50, y: y },\n      end: { x: pageWidth - 50, y: y },\n      thickness: 1,\n      color: rgb(0, 0, 0),\n    });\n    y -= 15;\n    \n    page.drawText('NOTES', {\n      x: 55,\n      y: y,\n      size: 12,\n      font: fontBold,\n      color: rgb(0, 0, 0),\n    });\n    y -= 30;\n    \n    // Notes satırları\n    for (let i = 1; i <= 3; i++) {\n      page.drawText(`${i}.`, {\n        x: 55,\n        y: y,\n        size: 10,\n        font: font,\n        color: rgb(0, 0, 0),\n      });\n      y -= 15;\n    }\n    \n    // FOOTER\n    //2 çizgi\n    y = 130;\n    page.drawLine({\n      start: { x: 50, y: y },\n      end: { x: pageWidth - 50, y: y },\n      thickness: 1,\n      color: rgb(0, 0, 0),\n    });\n       y = 130;\n    page.drawLine({\n      start: { x: 50, y: y-10 },\n      end: { x: pageWidth - 50, y: y-10 },\n      thickness: 1,\n      color: rgb(0, 0, 0),\n    });\n    \n    // Sol alt - ISSUED BY\n    page.drawText('ISSUED BY: TUANA TECHNICAL DEPARTMENT', {\n      x: 50,\n      y: y - 25,\n      size: 8,\n      font: font,\n      color: rgb(0, 0, 0),\n    });\n    \n    page.drawText('RESPONSIBLE TECHNICIAN: NURAN YELMEN', {\n      x: 50,\n      y: y - 40,\n      size: 8,\n      font: font,\n      color: rgb(0, 0, 0),\n    });\n    \n    page.drawText('SIGNATURE:', {\n      x: 50,\n      y: y - 55,\n      size: 8,\n      font: font,\n      color: rgb(0, 0, 0),\n    });\n    \n    // Sağ alt - STAMP alanı\n    page.drawText('STAMP', {\n      x: pageWidth / 2 + 10,\n      y: y - 25,\n      size: 10,\n      font: fontBold,\n      color: rgb(0, 0, 0),\n    });\n    //imza kaşe arsında çizgi\n     page.drawLine({\n      start: { x: pageWidth / 2, y: y-10 },\n      end: { x: pageWidth / 2, y: y-65 },\n      thickness: 1,\n      color: rgb(0, 0, 0),\n    });\n    \n    \n    // Sayfa numarası\n    page.drawText('1', {\n      x: pageWidth / 2,\n      y: 30,\n      size: 12,\n      font: fontBold,\n      color: rgb(0, 0, 0),\n    });\n    \n    // PDF'i byte array olarak al\n    console.log('Saving PDF...');\n    const pdfBytes = await pdfDoc.save();\n    \n    // Doğru headers ayarla\n    res.setHeader('Content-Type', 'application/pdf');\n    res.setHeader('Content-Disposition', `attachment; filename=\"TUANA_${docType}_${Date.now()}.pdf\"`);\n    res.setHeader('Content-Length', pdfBytes.length);\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    \n    console.log('PDF generated successfully, size:', pdfBytes.length, 'bytes');\n    res.send(Buffer.from(pdfBytes));\n\n  } catch (error) {\n    console.error('PDF generation error:', error);\n    console.error('Error stack:', error.stack);\n    res.status(500).json({ \n      error: 'PDF generation failed',\n      message: error.message,\n      stack: error.stack,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({ \n    error: 'Route not found',\n    path: req.originalUrl,\n    method: req.method,\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error('Server error:', err);\n  res.status(500).json({ \n    error: 'Internal server error',\n    message: err.message,\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Start server\nconst PORT = 3001;\napp.listen(PORT, '0.0.0.0', () => {\n  console.log(`🚀 Server running on http://localhost:${PORT}`);\n  console.log(`📋 PDF API available at http://localhost:${PORT}/api/pdf`);\n  console.log(`🌐 Server listening on all interfaces (0.0.0.0:${PORT})`);\n});\n\n*/","map":{"version":3,"names":["axios","api","create","baseURL","headers","generatePDF","docType","formData","res","post","responseType","timeout","data","Error","console","log","type","size","includes","text","errorData","JSON","parse","message","error","code","response","_error$response$data","status","request"],"sources":["/Users/mehmettfaik/Desktop/Frontend/frontend/src/api.js"],"sourcesContent":["// src/api.js\nimport axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:3001',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  }\n});\n\nexport const generatePDF = async (docType, formData) => {\n  try {\n    const res = await api.post(\n      '/api/pdf/generate',\n      { docType, formData },\n      { \n        responseType: 'blob',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/pdf'\n        },\n        timeout: 10000 // 10 saniye timeout\n      }\n    );\n    \n    if (!res.data) {\n      throw new Error('No data received from server');\n    }\n    \n    // PDF blob'unu doğrula\n    console.log('Response content type:', res.headers['content-type']);\n    console.log('Response data type:', res.data.type);\n    console.log('Response data size:', res.data.size);\n    \n    if (res.data.size === 0) {\n      throw new Error('Received empty file from server');\n    }\n    \n    if (res.data.type && !res.data.type.includes('pdf') && !res.data.type.includes('octet-stream')) {\n      // Eğer response PDF değilse, muhtemelen hata mesajı JSON formatında gelmiştir\n      const text = await res.data.text();\n      try {\n        const errorData = JSON.parse(text);\n        throw new Error(errorData.message || 'Server returned non-PDF data');\n      } catch {\n        throw new Error('Server returned invalid PDF data');\n      }\n    }\n    \n    return res.data;\n  } catch (error) {\n    console.error('PDF Generation Error:', error);\n    \n    if (error.code === 'ECONNABORTED') {\n      throw new Error('Request timed out. Server is taking too long to respond.');\n    }\n    \n    if (error.response) {\n      // Server yanıt verdi ama hata döndü\n      const message = error.response.data?.message || `Server error: ${error.response.status}`;\n      throw new Error(message);\n    } else if (error.request) {\n      // İstek yapıldı ama yanıt alınamadı\n      if (error.message.includes('Network Error')) {\n        throw new Error('Server is not accessible. Please check if the server is running on port 3001.');\n      }\n      throw new Error('No response received from server. Please try again.');\n    } else {\n      // İstek oluşturulurken hata oluştu\n      throw new Error(`Request failed: ${error.message}`);\n    }\n  }\n};\n\n/* \n\nconst express = require('express');\nconst cors = require('cors');\nconst fs = require('fs');\nconst path = require('path');\nconst { PDFDocument, StandardFonts, rgb } = require('pdf-lib');\n\nconst app = express();\n\n// CORS middleware - EN ÜSTTE OLMALI\napp.use(cors({\n  origin: '*',\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'Accept', 'X-Requested-With'],\n  exposedHeaders: ['Content-Type', 'Content-Length'],\n  credentials: false,\n  preflightContinue: false,\n  optionsSuccessStatus: 200\n}));\n\n// Manual CORS headers - extra güvenlik için\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With');\n  \n  if (req.method === 'OPTIONS') {\n    return res.sendStatus(200);\n  }\n  next();\n});\n\n// Body parser middleware\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Request logging\napp.use((req, res, next) => {\n  console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);\n  console.log('Headers:', req.headers);\n  if (req.body && Object.keys(req.body).length > 0) {\n    console.log('Body:', req.body);\n  }\n  next();\n});\n\n// Test endpoints first\napp.get('/', (req, res) => {\n  res.json({ \n    status: 'ok', \n    message: 'PDF API Server is running',\n    timestamp: new Date().toISOString(),\n    version: '1.0.0'\n  });\n});\n\napp.get('/test', (req, res) => {\n  res.json({ message: 'Test endpoint working' });\n});\n\n// PDF API endpoints\napp.get('/api/pdf/test', (req, res) => {\n  res.json({ \n    message: 'PDF API is working',\n    timestamp: new Date().toISOString()\n  });\n});\n\napp.post('/api/pdf/generate', async (req, res) => {\n  try {\n    console.log('PDF generation request received:', req.body);\n    \n    const { docType, formData } = req.body;\n\n    if (!docType) {\n      return res.status(400).json({ \n        error: 'docType is required',\n        received: req.body \n      });\n    }\n\n    // Türkçe karakterleri değiştir\n    const replaceTurkishChars = (text) => {\n      return text\n        .replace(/ğ/g, 'g').replace(/Ğ/g, 'G')\n        .replace(/ü/g, 'u').replace(/Ü/g, 'U')\n        .replace(/ş/g, 's').replace(/Ş/g, 'S')\n        .replace(/ı/g, 'i').replace(/İ/g, 'I')\n        .replace(/ö/g, 'o').replace(/Ö/g, 'O')\n        .replace(/ç/g, 'c').replace(/Ç/g, 'C');\n    };\n\n    // PDF oluşturma\n    console.log('Creating PDF document...');\n    const pdfDoc = await PDFDocument.create();\n    const page = pdfDoc.addPage([595, 842]); // A4 boyut\n    \n    console.log('Embedding fonts...');\n    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);\n    const fontBold = await pdfDoc.embedFont(StandardFonts.Helvetica); // Helvetica kullan\n    \n    // Logo yükleme fonksiyonu\n    let logoImage = null;\n    try {\n      // PNG logo dene\n      let logoPath = path.join(__dirname, 'logo.png');\n      let logoBytes = null;\n      let isJpg = false;\n      \n      if (fs.existsSync(logoPath)) {\n        logoBytes = fs.readFileSync(logoPath);\n      } else {\n        // JPG logo dene\n        logoPath = path.join(__dirname, 'logo.jpg');\n        if (fs.existsSync(logoPath)) {\n          logoBytes = fs.readFileSync(logoPath);\n          isJpg = true;\n        }\n      }\n      \n      if (logoBytes) {\n        if (isJpg) {\n          logoImage = await pdfDoc.embedJpg(logoBytes);\n        } else {\n          logoImage = await pdfDoc.embedPng(logoBytes);\n        }\n        console.log('Logo successfully loaded from:', logoPath);\n      } else {\n        console.log('Logo file not found. Looking for logo.png or logo.jpg in:', __dirname);\n      }\n    } catch (logoError) {\n      console.log('Logo loading error:', logoError.message);\n    }\n    \n    // Sayfa boyutları\n    const pageWidth = page.getWidth();\n    const pageHeight = page.getHeight();\n    \n    let y = pageHeight - 60; // Üst margin\n    \n    // HEADER - TUANA TEKSTIL\n    console.log('Adding header...');\n    \n    // TUANA TEKSTIL başlığı (solda) - ÖNCELİKLE YAZARIZ\n    page.drawText('TUANA TEKSTIL', {\n      x: 55,\n      y: y-5,\n      size: 35,\n      font: fontBold,\n      color: rgb(0, 0, 0),\n    });\n    \n    // Logo alanı (sağda)\n    if (logoImage) {\n      // Logo varsa çiz\n      const logoWidth = 25;\n      const logoHeight = 25;\n      page.drawImage(logoImage, {\n        x: pageWidth - 265,\n        y: y - 5,\n        width: logoWidth,\n        height: logoHeight,\n      });\n    } else {\n      // Logo yoksa placeholder çiz\n      page.drawRectangle({\n        x: pageWidth - 260,\n        y: y - 5,\n        width: 60,\n        height: 30,\n        borderColor: rgb(0.8, 0.8, 0.8),\n        borderWidth: 1,\n      });\n      page.drawText('LOGO', {\n        x: pageWidth - 235,\n        y: y + 5,\n        size: 10,\n        font: font,\n        color: rgb(0.5, 0.5, 0.5),\n      });\n    }\n    \n    y -= 30;\n    \n    // Ana çizgi TUANA TEKSTIL'in ALTINA\n    page.drawLine({\n      start: { x: 50, y: y+10 },\n      end: { x: pageWidth - 50, y: y+10 },\n      thickness: 1,\n      color: rgb(0, 0, 0),\n    });\n    \n    // ISSUE DATE (sağda) - çizginin altında\n    const currentDate = new Date().toLocaleDateString('en-GB');\n    page.drawText(`ISSUE DATE: ${currentDate}`, {\n      x: pageWidth - 155,\n      y: y + 40,\n      size: 8,\n      font: font,\n      color: rgb(0, 0, 0),\n    });\n    \n    // Dikey çizgi - TUANA TEKSTIL ile ISSUE DATE arasında\n    page.drawLine({\n      start: { x: pageWidth - 160, y: y + 55 },\n      end: { x: pageWidth - 160, y: y + 10 },\n      thickness: 1,\n      color: rgb(0, 0, 0),\n    });\n    \n    y -= 40;\n    \n    // FABRIC TECHNICAL SHEET alt başlığı\n    page.drawText('FABRIC TECHNICAL SHEET', {\n      x: 55,\n      y: y + 30,\n      size: 18,\n      font: fontBold,\n      color: rgb(0, 0, 0),\n    });\n    y += 15;\n    \n    // FORM TABLOSU\n    console.log('Creating form table...');\n    \n    const tableFields = [\n      'ARTICLE CODE:',\n      'COMPOSITION:',\n      'WEIGHT:',\n      'WIDTH / CUTABLE WIDTH:',\n      'CERTIFICATION:',\n      'CONSTRUCTION:',\n      'FINISH:',\n      'COLOUR:',\n      'JACQUARD PATTERN NAME:',\n      'MADE IN:',\n      'SHRINKAGE IN WARP:',\n      'SHRINKAGE IN WEFT:'\n    ];\n    \n    // Tablo çerçevesi\n    const tableStartY = y;\n    const tableHeight = tableFields.length * 25;\n    const tableWidth = pageWidth - 100;\n    \n    page.drawRectangle({\n      x: 50,\n      y: y - tableHeight,\n      width: tableWidth,\n      height: tableHeight,\n      borderColor: rgb(0, 0, 0),\n      borderWidth: 1,\n    });\n    \n    // Tablo satırları\n    tableFields.forEach((field, index) => {\n      const rowY = y - (index * 25);\n      \n      // Yatay çizgi\n      if (index > 0) {\n        page.drawLine({\n          start: { x: 50, y: rowY },\n          end: { x: 50 + tableWidth, y: rowY },\n          thickness: 0.5,\n          color: rgb(0, 0, 0),\n        });\n      }\n      \n      // Dikey çizgi (label ve value arasında)\n      page.drawLine({\n        start: { x: 220, y: rowY },\n        end: { x: 220, y: rowY - 25 },\n        thickness: 0.5,\n        color: rgb(0, 0, 0),\n      });\n      \n      // Label metni\n      page.drawText(field, {\n        x: 60,\n        y: rowY - 18,\n        size: 10,\n        font: fontBold,\n        color: rgb(0, 0, 0),\n      });\n      \n      // Value metni (form verilerinden gelecek)\n      if (formData) {\n        const fieldKey = field.replace(':', '').trim();\n        const value = formData[fieldKey] || '';\n        page.drawText(replaceTurkishChars(value.toString()), {\n          x: 230,\n          y: rowY - 18,\n          size: 10,\n          font: font,\n          color: rgb(0, 0, 0),\n        });\n      }\n    });\n    \n    y = y - tableHeight - 40;\n    \n    // WASH AND CARE INSTRUCTIONS bölümü\n    console.log('Adding wash and care section...');\n    \n    // Alt çizgi\n    page.drawLine({\n      start: { x: 50, y: y+10 },\n      end: { x: pageWidth - 50, y: y+10 },\n      thickness: 1,\n      color: rgb(0, 0, 0),\n    });\n    y -= 20;\n    \n    page.drawText('WASH AND CARE INSTRUCTIONS', {\n      x: 55,\n      y: y+10,\n      size: 16,\n      font: fontBold,\n      color: rgb(0, 0, 0),\n    });\n    y -= 30;\n    \n    // Yıkama iconları alanı - daha sonra eklenecek\n    page.drawRectangle({\n      x: 80,\n      y: y - 30,\n      width: 350,\n      height: 40,\n      borderColor: rgb(0.8, 0.8, 0.8),\n      borderWidth: 1,\n    });\n    page.drawText('WASHING ICONS WILL BE PLACED HERE', {\n      x: 150,\n      y: y - 15,\n      size: 10,\n      font: font,\n      color: rgb(0.5, 0.5, 0.5),\n    });\n    \n    y -= 50;\n    \n    // NOTES bölümü\n    page.drawLine({\n      start: { x: 50, y: y },\n      end: { x: pageWidth - 50, y: y },\n      thickness: 1,\n      color: rgb(0, 0, 0),\n    });\n    y -= 15;\n    \n    page.drawText('NOTES', {\n      x: 55,\n      y: y,\n      size: 12,\n      font: fontBold,\n      color: rgb(0, 0, 0),\n    });\n    y -= 30;\n    \n    // Notes satırları\n    for (let i = 1; i <= 3; i++) {\n      page.drawText(`${i}.`, {\n        x: 55,\n        y: y,\n        size: 10,\n        font: font,\n        color: rgb(0, 0, 0),\n      });\n      y -= 15;\n    }\n    \n    // FOOTER\n    //2 çizgi\n    y = 130;\n    page.drawLine({\n      start: { x: 50, y: y },\n      end: { x: pageWidth - 50, y: y },\n      thickness: 1,\n      color: rgb(0, 0, 0),\n    });\n       y = 130;\n    page.drawLine({\n      start: { x: 50, y: y-10 },\n      end: { x: pageWidth - 50, y: y-10 },\n      thickness: 1,\n      color: rgb(0, 0, 0),\n    });\n    \n    // Sol alt - ISSUED BY\n    page.drawText('ISSUED BY: TUANA TECHNICAL DEPARTMENT', {\n      x: 50,\n      y: y - 25,\n      size: 8,\n      font: font,\n      color: rgb(0, 0, 0),\n    });\n    \n    page.drawText('RESPONSIBLE TECHNICIAN: NURAN YELMEN', {\n      x: 50,\n      y: y - 40,\n      size: 8,\n      font: font,\n      color: rgb(0, 0, 0),\n    });\n    \n    page.drawText('SIGNATURE:', {\n      x: 50,\n      y: y - 55,\n      size: 8,\n      font: font,\n      color: rgb(0, 0, 0),\n    });\n    \n    // Sağ alt - STAMP alanı\n    page.drawText('STAMP', {\n      x: pageWidth / 2 + 10,\n      y: y - 25,\n      size: 10,\n      font: fontBold,\n      color: rgb(0, 0, 0),\n    });\n    //imza kaşe arsında çizgi\n     page.drawLine({\n      start: { x: pageWidth / 2, y: y-10 },\n      end: { x: pageWidth / 2, y: y-65 },\n      thickness: 1,\n      color: rgb(0, 0, 0),\n    });\n    \n    \n    // Sayfa numarası\n    page.drawText('1', {\n      x: pageWidth / 2,\n      y: 30,\n      size: 12,\n      font: fontBold,\n      color: rgb(0, 0, 0),\n    });\n    \n    // PDF'i byte array olarak al\n    console.log('Saving PDF...');\n    const pdfBytes = await pdfDoc.save();\n    \n    // Doğru headers ayarla\n    res.setHeader('Content-Type', 'application/pdf');\n    res.setHeader('Content-Disposition', `attachment; filename=\"TUANA_${docType}_${Date.now()}.pdf\"`);\n    res.setHeader('Content-Length', pdfBytes.length);\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    \n    console.log('PDF generated successfully, size:', pdfBytes.length, 'bytes');\n    res.send(Buffer.from(pdfBytes));\n\n  } catch (error) {\n    console.error('PDF generation error:', error);\n    console.error('Error stack:', error.stack);\n    res.status(500).json({ \n      error: 'PDF generation failed',\n      message: error.message,\n      stack: error.stack,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({ \n    error: 'Route not found',\n    path: req.originalUrl,\n    method: req.method,\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error('Server error:', err);\n  res.status(500).json({ \n    error: 'Internal server error',\n    message: err.message,\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Start server\nconst PORT = 3001;\napp.listen(PORT, '0.0.0.0', () => {\n  console.log(`🚀 Server running on http://localhost:${PORT}`);\n  console.log(`📋 PDF API available at http://localhost:${PORT}/api/pdf`);\n  console.log(`🌐 Server listening on all interfaces (0.0.0.0:${PORT})`);\n});\n\n*/\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}