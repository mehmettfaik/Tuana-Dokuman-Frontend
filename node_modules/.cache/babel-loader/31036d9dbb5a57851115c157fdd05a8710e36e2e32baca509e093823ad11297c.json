{"ast":null,"code":"// src/api.js\nimport axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\nexport const generatePDF = async (docType, formData) => {\n  try {\n    const res = await api.post('/api/pdf/generate', {\n      docType,\n      formData\n    }, {\n      responseType: 'blob',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': '*/*'\n      },\n      timeout: 5000 // 5 saniye timeout\n    });\n    if (!res.data) {\n      throw new Error('No data received from server');\n    }\n    return res.data;\n  } catch (error) {\n    console.error('PDF Generation Error:', error);\n    if (error.code === 'ECONNABORTED') {\n      throw new Error('Request timed out. Server is taking too long to respond.');\n    }\n    if (error.response) {\n      var _error$response$data;\n      // Server yanıt verdi ama hata döndü\n      const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || `Server error: ${error.response.status}`;\n      throw new Error(message);\n    } else if (error.request) {\n      // İstek yapıldı ama yanıt alınamadı\n      if (error.message.includes('Network Error')) {\n        throw new Error('Server is not accessible. Please check if the server is running on port 5000.');\n      }\n      throw new Error('No response received from server. Please try again.');\n    } else {\n      // İstek oluşturulurken hata oluştu\n      throw new Error(`Request failed: ${error.message}`);\n    }\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","headers","generatePDF","docType","formData","res","post","responseType","timeout","data","Error","error","console","code","response","_error$response$data","message","status","request","includes"],"sources":["/Users/mehmettfaik/Desktop/Frontend/frontend/src/api.js"],"sourcesContent":["// src/api.js\nimport axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  }\n});\n\nexport const generatePDF = async (docType, formData) => {\n  try {\n    const res = await api.post(\n      '/api/pdf/generate',\n      { docType, formData },\n      { \n        responseType: 'blob',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': '*/*'\n        },\n        timeout: 5000 // 5 saniye timeout\n      }\n    );\n    \n    if (!res.data) {\n      throw new Error('No data received from server');\n    }\n    \n    return res.data;\n  } catch (error) {\n    console.error('PDF Generation Error:', error);\n    \n    if (error.code === 'ECONNABORTED') {\n      throw new Error('Request timed out. Server is taking too long to respond.');\n    }\n    \n    if (error.response) {\n      // Server yanıt verdi ama hata döndü\n      const message = error.response.data?.message || `Server error: ${error.response.status}`;\n      throw new Error(message);\n    } else if (error.request) {\n      // İstek yapıldı ama yanıt alınamadı\n      if (error.message.includes('Network Error')) {\n        throw new Error('Server is not accessible. Please check if the server is running on port 5000.');\n      }\n      throw new Error('No response received from server. Please try again.');\n    } else {\n      // İstek oluşturulurken hata oluştu\n      throw new Error(`Request failed: ${error.message}`);\n    }\n  }\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,OAAO,EAAEC,QAAQ,KAAK;EACtD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CACxB,mBAAmB,EACnB;MAAEH,OAAO;MAAEC;IAAS,CAAC,EACrB;MACEG,YAAY,EAAE,MAAM;MACpBN,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,QAAQ,EAAE;MACZ,CAAC;MACDO,OAAO,EAAE,IAAI,CAAC;IAChB,CACF,CAAC;IAED,IAAI,CAACH,GAAG,CAACI,IAAI,EAAE;MACb,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;IAEA,OAAOL,GAAG,CAACI,IAAI;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAE7C,IAAIA,KAAK,CAACE,IAAI,KAAK,cAAc,EAAE;MACjC,MAAM,IAAIH,KAAK,CAAC,0DAA0D,CAAC;IAC7E;IAEA,IAAIC,KAAK,CAACG,QAAQ,EAAE;MAAA,IAAAC,oBAAA;MAClB;MACA,MAAMC,OAAO,GAAG,EAAAD,oBAAA,GAAAJ,KAAK,CAACG,QAAQ,CAACL,IAAI,cAAAM,oBAAA,uBAAnBA,oBAAA,CAAqBC,OAAO,KAAI,iBAAiBL,KAAK,CAACG,QAAQ,CAACG,MAAM,EAAE;MACxF,MAAM,IAAIP,KAAK,CAACM,OAAO,CAAC;IAC1B,CAAC,MAAM,IAAIL,KAAK,CAACO,OAAO,EAAE;MACxB;MACA,IAAIP,KAAK,CAACK,OAAO,CAACG,QAAQ,CAAC,eAAe,CAAC,EAAE;QAC3C,MAAM,IAAIT,KAAK,CAAC,+EAA+E,CAAC;MAClG;MACA,MAAM,IAAIA,KAAK,CAAC,qDAAqD,CAAC;IACxE,CAAC,MAAM;MACL;MACA,MAAM,IAAIA,KAAK,CAAC,mBAAmBC,KAAK,CAACK,OAAO,EAAE,CAAC;IACrD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}