{"ast":null,"code":"// src/api.js\nimport axios from'axios';const api=axios.create({baseURL:process.env.REACT_APP_API_URL,headers:{'Content-Type':'application/json','Accept':'application/json'}});export const generatePDF=async function(formData){let formType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'fabric-technical';let language=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'turkish';try{// Yeni endpoint'leri kullan\nlet endpoint;if(formType==='proforma-invoice'){endpoint='/api/pdf/generate-proforma';}else if(formType==='fabric-technical'){endpoint='/api/pdf/generate-technical';}else if(formType==='invoice'){endpoint='/api/pdf/generate-invoice';}else if(formType==='packing-list'){endpoint='/api/pdf/generate-packing-list';}else if(formType==='credit-note'){endpoint='/api/pdf/generate-credit-note';}else if(formType==='debit-note'){endpoint='/api/pdf/generate-debit-note';}else if(formType==='order-confirmation'){endpoint='/api/pdf/generate-order-confirmation';}else if(formType==='siparis'){endpoint='/api/pdf/generate-siparis';}else if(formType==='price-offer'){endpoint='/api/pdf/generate-price-offer';}else{// Genel endpoint (eski API uyumluluğu için)\nendpoint='/api/pdf/generate';}const res=await api.post(endpoint,{formData,language},{responseType:'blob',headers:{'Content-Type':'application/json','Accept':'application/pdf'},timeout:120000// 120 saniye timeout\n});if(!res.data){throw new Error('No data received from server');}// PDF blob'unu doğrula\nconsole.log('Response content type:',res.headers['content-type']);console.log('Response data type:',res.data.type);console.log('Response data size:',res.data.size);if(res.data.size===0){throw new Error('Received empty file from server');}if(res.data.type&&!res.data.type.includes('pdf')&&!res.data.type.includes('octet-stream')){// Eğer response PDF değilse, muhtemelen hata mesajı JSON formatında gelmiştir\nconst text=await res.data.text();try{const errorData=JSON.parse(text);throw new Error(errorData.message||'Server returned non-PDF data');}catch{throw new Error('Server returned invalid PDF data');}}return res.data;}catch(error){console.error('PDF Generation Error:',error);if(error.code==='ECONNABORTED'){throw new Error('Request timed out. Server is taking too long to respond.');}if(error.response){var _error$response$data;// Server yanıt verdi ama hata döndü\nconst message=((_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||`Server error: ${error.response.status}`;throw new Error(message);}else if(error.request){// İstek yapıldı ama yanıt alınamadı\nif(error.message.includes('Network Error')){throw new Error('Server is not accessible. Please check if the server is running on port 3001.');}throw new Error('No response received from server. Please try again.');}else{// İstek oluşturulurken hata oluştu\nthrow new Error(`Request failed: ${error.message}`);}}};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","generatePDF","formData","formType","arguments","length","undefined","language","endpoint","res","post","responseType","timeout","data","Error","console","log","type","size","includes","text","errorData","JSON","parse","message","error","code","response","_error$response$data","status","request"],"sources":["/Users/mehmettfaik/Documents/GitHub/Tuana-Dokuman-Frontend/src/api.js"],"sourcesContent":["// src/api.js\nimport axios from 'axios';\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  }\n});\n\nexport const generatePDF = async (formData, formType = 'fabric-technical', language = 'turkish') => {\n  try {\n    // Yeni endpoint'leri kullan\n    let endpoint;\n    if (formType === 'proforma-invoice') {\n      endpoint = '/api/pdf/generate-proforma';\n    } else if (formType === 'fabric-technical') {\n      endpoint = '/api/pdf/generate-technical';\n    } else if (formType === 'invoice') {\n      endpoint = '/api/pdf/generate-invoice';\n    } else if (formType === 'packing-list') {\n      endpoint = '/api/pdf/generate-packing-list';\n    } else if (formType === 'credit-note') {\n      endpoint = '/api/pdf/generate-credit-note';\n    } else if (formType === 'debit-note') {\n      endpoint = '/api/pdf/generate-debit-note';\n    } else if (formType === 'order-confirmation') {\n      endpoint = '/api/pdf/generate-order-confirmation';\n    } else if (formType === 'siparis') {\n      endpoint = '/api/pdf/generate-siparis';\n    } else if (formType === 'price-offer') {\n      endpoint = '/api/pdf/generate-price-offer';\n    } else {\n      // Genel endpoint (eski API uyumluluğu için)\n      endpoint = '/api/pdf/generate';\n    }\n\n    const res = await api.post(\n      endpoint,\n      { \n        formData,\n        language \n      },\n      { \n        responseType: 'blob',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/pdf'\n        },\n        timeout: 120000 // 120 saniye timeout\n      }\n    );\n    \n    if (!res.data) {\n      throw new Error('No data received from server');\n    }\n    \n    // PDF blob'unu doğrula\n    console.log('Response content type:', res.headers['content-type']);\n    console.log('Response data type:', res.data.type);\n    console.log('Response data size:', res.data.size);\n    \n    if (res.data.size === 0) {\n      throw new Error('Received empty file from server');\n    }\n    \n    if (res.data.type && !res.data.type.includes('pdf') && !res.data.type.includes('octet-stream')) {\n      // Eğer response PDF değilse, muhtemelen hata mesajı JSON formatında gelmiştir\n      const text = await res.data.text();\n      try {\n        const errorData = JSON.parse(text);\n        throw new Error(errorData.message || 'Server returned non-PDF data');\n      } catch {\n        throw new Error('Server returned invalid PDF data');\n      }\n    }\n    \n    return res.data;\n  } catch (error) {\n    console.error('PDF Generation Error:', error);\n    \n    if (error.code === 'ECONNABORTED') {\n      throw new Error('Request timed out. Server is taking too long to respond.');\n    }\n    \n    if (error.response) {\n      // Server yanıt verdi ama hata döndü\n      const message = error.response.data?.message || `Server error: ${error.response.status}`;\n      throw new Error(message);\n    } else if (error.request) {\n      // İstek yapıldı ama yanıt alınamadı\n      if (error.message.includes('Network Error')) {\n        throw new Error('Server is not accessible. Please check if the server is running on port 3001.');\n      }\n      throw new Error('No response received from server. Please try again.');\n    } else {\n      // İstek oluşturulurken hata oluştu\n      throw new Error(`Request failed: ${error.message}`);\n    }\n  }\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}