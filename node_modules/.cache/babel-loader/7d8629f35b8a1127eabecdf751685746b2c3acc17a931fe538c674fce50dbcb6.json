{"ast":null,"code":"// services/pdfService.js\nclass PDFService {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n  }\n\n  // Backend bağlantısını test et\n  async testConnection() {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 saniye timeout\n\n      const response = await fetch(`${this.baseURL}/api/health`, {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (response.ok) {\n        const data = await response.json().catch(() => ({}));\n        console.log('Backend health check:', data);\n        return true;\n      } else {\n        console.warn('Backend health check failed:', response.status);\n        return false;\n      }\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        console.warn('Backend health check timeout');\n      } else {\n        console.warn('Backend servisi erişilebilir değil:', error.message);\n      }\n      return false;\n    }\n  }\n\n  // 1. PDF üretimini başlat\n  async startPDFGeneration(docType, formData, language = 'en') {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/start`, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          docType,\n          formData,\n          language\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      return result.jobId;\n    } catch (error) {\n      console.error('Error starting PDF generation:', error);\n      throw error;\n    }\n  }\n\n  // 2. PDF durumunu kontrol et\n  async checkPDFStatus(jobId) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/status/${jobId}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking PDF status:', error);\n      throw error;\n    }\n  }\n\n  // 3. PDF'i indir\n  async downloadPDF(jobId, fileName = 'document.pdf') {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/download/${jobId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const blob = await response.blob();\n\n      // Blob'un boyutunu kontrol et\n      if (blob.size === 0) {\n        throw new Error('Received empty PDF file from server');\n      }\n\n      // Dosyayı indir\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = fileName;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      return true;\n    } catch (error) {\n      console.error('Error downloading PDF:', error);\n      throw error;\n    }\n  }\n\n  // Polling ile durum kontrolü (otomatik kontrol)\n  async waitForPDFCompletion(jobId, onProgress = null, timeout = 60000) {\n    const startTime = Date.now();\n    const pollInterval = 1000; // 1 saniye\n\n    return new Promise((resolve, reject) => {\n      const poll = async () => {\n        try {\n          if (Date.now() - startTime > timeout) {\n            reject(new Error('PDF generation timeout'));\n            return;\n          }\n          const status = await this.checkPDFStatus(jobId);\n\n          // Progress callback'i varsa çağır\n          if (onProgress) {\n            onProgress(status);\n          }\n          if (status.status === 'completed') {\n            resolve(status);\n          } else if (status.status === 'failed') {\n            reject(new Error(status.error || 'PDF generation failed'));\n          } else {\n            // Hala pending/processing, tekrar kontrol et\n            setTimeout(poll, pollInterval);\n          }\n        } catch (error) {\n          reject(error);\n        }\n      };\n      poll();\n    });\n  }\n\n  // Form type'a göre dosya adı oluştur\n  generateFileName(docType, formData, language = 'en') {\n    const timestamp = Date.now();\n    // Hem yeni (tr/en) hem eski (turkish/english) formatları destekle\n    const isTurkish = language === 'tr' || language === 'turkish';\n    switch (docType) {\n      case 'proforma-invoice':\n        const proformaNumber = formData['PROFORMA INVOICE NUMBER'] || 'Proforma';\n        const proformaCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safeProformaName = `${proformaNumber}_${proformaCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeProformaName}_${isTurkish ? 'Proforma-Fatura' : 'Proforma-Invoice'}.pdf`;\n      case 'invoice':\n        const invoiceNumber = formData['INVOICE NUMBER'] || 'Invoice';\n        const invoiceCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safeInvoiceName = `${invoiceNumber}_${invoiceCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeInvoiceName}_${isTurkish ? 'Fatura' : 'Invoice'}.pdf`;\n      case 'packing-list':\n        const packingInvoiceNumber = formData['INVOICE NUMBER'] || 'No-Invoice-Number';\n        const packingCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safePackingName = `${packingInvoiceNumber}_${packingCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safePackingName}_${isTurkish ? 'Çeki-Listesi' : 'Packing-List'}.pdf`;\n      case 'credit-note':\n        const creditNumber = formData['CREDIT NOTE NUMBER'] || 'Credit-Note';\n        const safeCreditNumber = creditNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeCreditNumber}_${isTurkish ? 'Iade-Faturasi' : 'Credit-Note'}.pdf`;\n      case 'debit-note':\n        const debitNumber = formData['DEBIT NOTE NUMBER'] || 'Debit-Note';\n        const safeDebitNumber = debitNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeDebitNumber}_${isTurkish ? 'Debit-Note' : 'Debit-Note'}.pdf`;\n      case 'order-confirmation':\n        const orderConfirmationCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safeOrderConfirmationCompany = orderConfirmationCompany.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeOrderConfirmationCompany}_${isTurkish ? 'Siparis-Onay' : 'Order-Confirmation'}.pdf`;\n      case 'siparis':\n        const orderNumber = formData['ORDER NUMBER'] || 'No-Order-Number';\n        const safeOrderNumber = orderNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeOrderNumber}_${isTurkish ? 'Siparis-Formu' : 'Order-Form'}.pdf`;\n      case 'price-offer':\n        const priceOfferNumber = formData['PRICE OFFER NUMBER'] || 'No-Price-Offer-Number';\n        const safePriceOfferNumber = priceOfferNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safePriceOfferNumber}_${isTurkish ? 'Fiyat-Teklifi' : 'Price-Offer'}.pdf`;\n      case 'fabric-technical':\n        const articleCode = formData['ARTICLE CODE'] || 'Technical';\n        const safeArticleCode = articleCode.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeArticleCode}_${isTurkish ? 'Teknik-Foy' : 'Technical-Specification'}.pdf`;\n      default:\n        return `${docType}_${timestamp}.pdf`;\n    }\n  }\n\n  // Ana PDF üretim fonksiyonu - Production için\n  async generatePDFWithFallback(formData, docType, language = 'en') {\n    try {\n      console.log('Starting PDF generation with backend API');\n\n      // Backend durumunu kontrol et\n      const isConnected = await this.testConnection();\n      if (!isConnected) {\n        throw new Error('Backend servisi şu anda erişilebilir değil.');\n      }\n      const jobId = await this.startPDFGeneration(docType, formData, language);\n      await this.waitForPDFCompletion(jobId);\n      const fileName = this.generateFileName(docType, formData, language);\n      return await this.downloadPDF(jobId, fileName);\n    } catch (error) {\n      console.error('PDF generation failed:', error);\n\n      // Backend bağlantı hatalarını kullanıcı dostu mesajlara çevir\n      if (error.message.includes('template.generate is not a function')) {\n        throw new Error('PDF şablonu hatası tespit edildi. Backend geliştirici ekibi bilgilendirildi. Lütfen daha sonra tekrar deneyin.');\n      } else if (error.message.includes('500') || error.message.includes('502') || error.message.includes('Load failed')) {\n        throw new Error('Backend servisi şu anda bakımda. Lütfen birkaç dakika sonra tekrar deneyin.');\n      } else if (error.message.includes('404')) {\n        throw new Error('PDF oluşturma servisi bulunamadı. Lütfen sistem yöneticisi ile iletişime geçin.');\n      } else if (error.message.includes('timeout')) {\n        throw new Error('PDF oluşturma işlemi zaman aşımına uğradı. Lütfen tekrar deneyin.');\n      } else if (error.message.includes('Backend servisi şu anda erişilebilir değil')) {\n        throw new Error('Backend servisi şu anda bakımda. Lütfen daha sonra tekrar deneyin.');\n      } else {\n        throw new Error(`PDF oluşturulamadı: ${error.message}`);\n      }\n    }\n  }\n}\nconst pdfService = new PDFService();\nexport default pdfService;","map":{"version":3,"names":["PDFService","constructor","baseURL","process","env","REACT_APP_API_URL","testConnection","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","mode","headers","signal","clearTimeout","ok","data","json","catch","console","log","warn","status","error","name","message","startPDFGeneration","docType","formData","language","body","JSON","stringify","errorData","Error","result","jobId","checkPDFStatus","downloadPDF","fileName","blob","size","url","window","URL","createObjectURL","a","document","createElement","style","display","href","download","appendChild","click","revokeObjectURL","removeChild","waitForPDFCompletion","onProgress","timeout","startTime","Date","now","pollInterval","Promise","resolve","reject","poll","generateFileName","timestamp","isTurkish","proformaNumber","proformaCompany","safeProformaName","replace","invoiceNumber","invoiceCompany","safeInvoiceName","packingInvoiceNumber","packingCompany","safePackingName","creditNumber","safeCreditNumber","debitNumber","safeDebitNumber","orderConfirmationCompany","safeOrderConfirmationCompany","orderNumber","safeOrderNumber","priceOfferNumber","safePriceOfferNumber","articleCode","safeArticleCode","generatePDFWithFallback","isConnected","includes","pdfService"],"sources":["/Users/mehmettfaik/Documents/GitHub/Tuana-Dokuman-Frontend/src/services/pdfService.js"],"sourcesContent":["// services/pdfService.js\nclass PDFService {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n  }\n\n  // Backend bağlantısını test et\n  async testConnection() {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 saniye timeout\n      \n      const response = await fetch(`${this.baseURL}/api/health`, {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n      \n      if (response.ok) {\n        const data = await response.json().catch(() => ({}));\n        console.log('Backend health check:', data);\n        return true;\n      } else {\n        console.warn('Backend health check failed:', response.status);\n        return false;\n      }\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        console.warn('Backend health check timeout');\n      } else {\n        console.warn('Backend servisi erişilebilir değil:', error.message);\n      }\n      return false;\n    }\n  }\n\n  // 1. PDF üretimini başlat\n  async startPDFGeneration(docType, formData, language = 'en') {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/start`, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          docType,\n          formData,\n          language\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      return result.jobId;\n    } catch (error) {\n      console.error('Error starting PDF generation:', error);\n      throw error;\n    }\n  }\n\n  // 2. PDF durumunu kontrol et\n  async checkPDFStatus(jobId) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/status/${jobId}`);\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking PDF status:', error);\n      throw error;\n    }\n  }\n\n  // 3. PDF'i indir\n  async downloadPDF(jobId, fileName = 'document.pdf') {\n    try {\n      const response = await fetch(`${this.baseURL}/api/pdf/download/${jobId}`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const blob = await response.blob();\n      \n      // Blob'un boyutunu kontrol et\n      if (blob.size === 0) {\n        throw new Error('Received empty PDF file from server');\n      }\n      \n      // Dosyayı indir\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = fileName;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      return true;\n    } catch (error) {\n      console.error('Error downloading PDF:', error);\n      throw error;\n    }\n  }\n\n  // Polling ile durum kontrolü (otomatik kontrol)\n  async waitForPDFCompletion(jobId, onProgress = null, timeout = 60000) {\n    const startTime = Date.now();\n    const pollInterval = 1000; // 1 saniye\n\n    return new Promise((resolve, reject) => {\n      const poll = async () => {\n        try {\n          if (Date.now() - startTime > timeout) {\n            reject(new Error('PDF generation timeout'));\n            return;\n          }\n\n          const status = await this.checkPDFStatus(jobId);\n          \n          // Progress callback'i varsa çağır\n          if (onProgress) {\n            onProgress(status);\n          }\n\n          if (status.status === 'completed') {\n            resolve(status);\n          } else if (status.status === 'failed') {\n            reject(new Error(status.error || 'PDF generation failed'));\n          } else {\n            // Hala pending/processing, tekrar kontrol et\n            setTimeout(poll, pollInterval);\n          }\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      poll();\n    });\n  }\n\n  // Form type'a göre dosya adı oluştur\n  generateFileName(docType, formData, language = 'en') {\n    const timestamp = Date.now();\n    // Hem yeni (tr/en) hem eski (turkish/english) formatları destekle\n    const isTurkish = language === 'tr' || language === 'turkish';\n    \n    switch (docType) {\n      case 'proforma-invoice':\n        const proformaNumber = formData['PROFORMA INVOICE NUMBER'] || 'Proforma';\n        const proformaCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safeProformaName = `${proformaNumber}_${proformaCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeProformaName}_${isTurkish ? 'Proforma-Fatura' : 'Proforma-Invoice'}.pdf`;\n        \n      case 'invoice':\n        const invoiceNumber = formData['INVOICE NUMBER'] || 'Invoice';\n        const invoiceCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safeInvoiceName = `${invoiceNumber}_${invoiceCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeInvoiceName}_${isTurkish ? 'Fatura' : 'Invoice'}.pdf`;\n        \n      case 'packing-list':\n        const packingInvoiceNumber = formData['INVOICE NUMBER'] || 'No-Invoice-Number';\n        const packingCompany = formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safePackingName = `${packingInvoiceNumber}_${packingCompany}`.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safePackingName}_${isTurkish ? 'Çeki-Listesi' : 'Packing-List'}.pdf`;\n        \n      case 'credit-note':\n        const creditNumber = formData['CREDIT NOTE NUMBER'] || 'Credit-Note';\n        const safeCreditNumber = creditNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeCreditNumber}_${isTurkish ? 'Iade-Faturasi' : 'Credit-Note'}.pdf`;\n        \n      case 'debit-note':\n        const debitNumber = formData['DEBIT NOTE NUMBER'] || 'Debit-Note';\n        const safeDebitNumber = debitNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeDebitNumber}_${isTurkish ? 'Debit-Note' : 'Debit-Note'}.pdf`;\n        \n      case 'order-confirmation':\n        const orderConfirmationCompany =  formData['RECIPIENT Şirket Adı'] || 'Company';\n        const safeOrderConfirmationCompany = orderConfirmationCompany.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeOrderConfirmationCompany}_${isTurkish ? 'Siparis-Onay' : 'Order-Confirmation'}.pdf`;\n\n      case 'siparis':\n        const orderNumber = formData['ORDER NUMBER'] || 'No-Order-Number';\n        const safeOrderNumber = orderNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeOrderNumber}_${isTurkish ? 'Siparis-Formu' : 'Order-Form'}.pdf`;\n        \n      case 'price-offer':\n        const priceOfferNumber = formData['PRICE OFFER NUMBER'] || 'No-Price-Offer-Number';\n        const safePriceOfferNumber = priceOfferNumber.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safePriceOfferNumber}_${isTurkish ? 'Fiyat-Teklifi' : 'Price-Offer'}.pdf`;\n        \n      case 'fabric-technical':\n        const articleCode = formData['ARTICLE CODE'] || 'Technical';\n        const safeArticleCode = articleCode.replace(/[^a-zA-Z0-9-_\\s]/g, '').replace(/\\s+/g, '-');\n        return `${safeArticleCode}_${isTurkish ? 'Teknik-Foy' : 'Technical-Specification'}.pdf`;\n        \n      default:\n        return `${docType}_${timestamp}.pdf`;\n    }\n  }\n\n  // Ana PDF üretim fonksiyonu - Production için\n  async generatePDFWithFallback(formData, docType, language = 'en') {\n    try {\n      console.log('Starting PDF generation with backend API');\n      \n      // Backend durumunu kontrol et\n      const isConnected = await this.testConnection();\n      if (!isConnected) {\n        throw new Error('Backend servisi şu anda erişilebilir değil.');\n      }\n      \n      const jobId = await this.startPDFGeneration(docType, formData, language);\n      await this.waitForPDFCompletion(jobId);\n      const fileName = this.generateFileName(docType, formData, language);\n      return await this.downloadPDF(jobId, fileName);\n    } catch (error) {\n      console.error('PDF generation failed:', error);\n      \n      // Backend bağlantı hatalarını kullanıcı dostu mesajlara çevir\n      if (error.message.includes('template.generate is not a function')) {\n        throw new Error('PDF şablonu hatası tespit edildi. Backend geliştirici ekibi bilgilendirildi. Lütfen daha sonra tekrar deneyin.');\n      } else if (error.message.includes('500') || error.message.includes('502') || error.message.includes('Load failed')) {\n        throw new Error('Backend servisi şu anda bakımda. Lütfen birkaç dakika sonra tekrar deneyin.');\n      } else if (error.message.includes('404')) {\n        throw new Error('PDF oluşturma servisi bulunamadı. Lütfen sistem yöneticisi ile iletişime geçin.');\n      } else if (error.message.includes('timeout')) {\n        throw new Error('PDF oluşturma işlemi zaman aşımına uğradı. Lütfen tekrar deneyin.');\n      } else if (error.message.includes('Backend servisi şu anda erişilebilir değil')) {\n        throw new Error('Backend servisi şu anda bakımda. Lütfen daha sonra tekrar deneyin.');\n      } else {\n        throw new Error(`PDF oluşturulamadı: ${error.message}`);\n      }\n    }\n  }\n}\n\nconst pdfService = new PDFService();\nexport default pdfService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}